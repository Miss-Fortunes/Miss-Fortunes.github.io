<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 安装</title>
    <url>/2020/06/15/hexo/hexo%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="Hexo-介绍"><a href="#Hexo-介绍" class="headerlink" title="Hexo 介绍"></a>Hexo 介绍</h3><p>Hexo 是一个基于nodejs 的静态博客网站生成器，作者是来自台湾的 Tommy Chen</p><ul><li>不可思议的快速 ─ 只要一眨眼静态文件即生成完成</li><li>支持 Markdown</li><li>仅需一道指令即可部署到 GitHub Pages 和 Heroku</li><li>已移植 Octopress 插件</li><li>高扩展性、自订性</li><li>兼容于 Windows, Mac &amp; Linux</li></ul><h3 id="Hexo-搭建步骤"><a href="#Hexo-搭建步骤" class="headerlink" title="Hexo 搭建步骤"></a>Hexo 搭建步骤</h3><p>1.安装Git<br>2.安装Node.js<br>3.安装Hexo<br>4.GitHub创建个人仓库<br>5.将hexo部署到GitHub</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>1.安装git<br>windows：到git官网上下载,Download git,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>2.安装 noodJS<br>windows：官网下载 nodejs 选择LTS版本就行了。</p><h4 id="搭建-Hexo"><a href="#搭建-Hexo" class="headerlink" title="搭建 Hexo"></a>搭建 Hexo</h4><p>1.安装 Hexo</p><p>如果你连 npm 是啥都不知道，对不起，我们的缘分尽了，你走吧。…别，别，别，开个玩笑，有啥问题可以留言。打开命令行，输入下面的命令，全局安装 hexo。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>2.初始化项目</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地运行</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h4 id="部署到git"><a href="#部署到git" class="headerlink" title="部署到git"></a>部署到git</h4><p>1.新建仓库</p><p>上 github 新建一个仓库，仓库名必须为 &lt; user-name &gt;.github.io 格式，其中 &lt; user-name &gt; 是你 github 的昵称。</p><p>2.配置git参数</p><p>在项目根目录下找到 _congif.yml，找到 deploy 字段并填写完整</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;你的仓库地址&gt; <span class="comment"># https://github.com/Miss-Fortunes/Miss-Fortunes.github.io</span></span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure><p>3.安装 hexo-deployer-git 插件，用来部署项目到仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>4.部署项目指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>5.查看线上博客</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">浏览器访问：https://Miss-Fortunes.github.io/ 即可看到效果。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>study</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本指令</title>
    <url>/2020/06/10/git/Git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="git基本指令"><a href="#git基本指令" class="headerlink" title="[ git基本指令 ]"></a>[ git基本指令 ]</h3><h4 id="转载Alley-巷子"><a href="#转载Alley-巷子" class="headerlink" title="$ 转载Alley-巷子"></a>$ 转载Alley-巷子</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ friendLinks = [Alley-巷子](https://www.cnblogs.com/nanianqiming/p/8999637.html)</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.cnblogs.com/nanianqiming/p/8999637.html" target="_blank" rel="noopener">Alley-巷子</a></li><li><a href="https://www.cnblogs.com/nanianqiming/p/8999637.html" target="_blank" rel="noopener">https://www.cnblogs.com/nanianqiming/p/8999637.html</a></li></ul><h4 id="1-初始化仓库，创建git仓库"><a href="#1-初始化仓库，创建git仓库" class="headerlink" title="1. 初始化仓库，创建git仓库"></a>1. 初始化仓库，创建git仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h4 id="2-配置个人信息"><a href="#2-配置个人信息" class="headerlink" title="2. 配置个人信息"></a>2. 配置个人信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &lt;名字&gt; ---------&gt;:配置用户名</span><br><span class="line"></span><br><span class="line">git config --global user.email &lt;邮箱&gt;---------&gt;：配置邮箱</span><br><span class="line"></span><br><span class="line">git config --list ----------------------------&gt;：查看配置信息</span><br><span class="line"></span><br><span class="line">git config --global user.name  ---------------&gt;：查看用户名</span><br><span class="line"></span><br><span class="line">git config --global user.email ---------------&gt; :查看邮箱</span><br></pre></td></tr></table></figure><h4 id="3-将工作区文件添加到暂存区"><a href="#3-将工作区文件添加到暂存区" class="headerlink" title="3.将工作区文件添加到暂存区"></a>3.将工作区文件添加到暂存区</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add &lt;文件名称&gt; ------------&gt; 指定文件</span><br><span class="line"></span><br><span class="line">git add .  -------------------&gt; 全部文件</span><br></pre></td></tr></table></figure><h4 id="4-查看文件状态"><a href="#4-查看文件状态" class="headerlink" title="4.查看文件状态"></a>4.查看文件状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><div class="wyx-code-block"><img src="http://images2018.cnblogs.com/blog/917454/201805/917454-20180506195613998-1894452043.png" referrerpolicy="no-referrer"></div><h4 id="5-将缓存区的文件添加到版本库"><a href="#5-将缓存区的文件添加到版本库" class="headerlink" title="5.将缓存区的文件添加到版本库"></a>5.将缓存区的文件添加到版本库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &#39;提交版本内容说明&#39; ------&gt; 将缓存区的文件添加到版本库中 并加上说明注释</span><br></pre></td></tr></table></figure><div class="wyx-code-block"><img src="http://images2018.cnblogs.com/blog/917454/201805/917454-20180506195948719-2012794531.png" referrerpolicy="no-referrer"></div><h4 id="6-查看提交的版本日志"><a href="#6-查看提交的版本日志" class="headerlink" title="6.查看提交的版本日志"></a>6.查看提交的版本日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><div class="wyx-code-block"><img src="http://images2018.cnblogs.com/blog/917454/201805/917454-20180506195941419-1764458669.png" referrerpolicy="no-referrer"></div><h4 id="7-查看文件最新改动的地方"><a href="#7-查看文件最新改动的地方" class="headerlink" title="7.查看文件最新改动的地方"></a>7.查看文件最新改动的地方</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff &lt;文件名称&gt; -----------&gt;:查看工作区与暂存区文件的比较</span><br><span class="line"></span><br><span class="line">git diff --cached ------------&gt;:查看暂存区与版本库文件的比较</span><br><span class="line"></span><br><span class="line">git diff master --------------&gt;:查看工作区与版本区文件的比较</span><br></pre></td></tr></table></figure><div class="wyx-code-block"><img src="http://images2018.cnblogs.com/blog/917454/201805/917454-20180506200702002-745482041.png" referrerpolicy="no-referrer"><p>-开头的行，是只出现在源文件中的行</p><p>+开头的行，是只出现在目标文件中的行</p><p>空格开头的行，是源文件和目标文件中都出现的行</p><p>差异按照差异小结进行组织，每个差异小结的第一行都是定位语句，由@@开头，@@结尾</p><p></p></div><h4 id="8-查看所有版本号"><a href="#8-查看所有版本号" class="headerlink" title="8.查看所有版本号"></a>8.查看所有版本号</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><div class="wyx-code-block"><img src="http://images2018.cnblogs.com/blog/917454/201805/917454-20180506201247622-396571827.png" referrerpolicy="no-referrer"></div><h4 id="9-版本回退"><a href="#9-版本回退" class="headerlink" title="9.版本回退"></a>9.版本回退</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ ---------&gt;回退到上一个版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^^ ---------&gt;回退到上上个版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~N ---------&gt;回退到第N个版本 N是一个整数</span><br><span class="line"></span><br><span class="line">git reset --hard 版本号 ---------&gt;回退到指定版本</span><br></pre></td></tr></table></figure><div class="wyx-code-block"><img src="http://images2018.cnblogs.com/blog/917454/201805/917454-20180506201140492-1660062533.png" referrerpolicy="no-referrer"></div><h4 id="10-删除操作"><a href="#10-删除操作" class="headerlink" title="10.删除操作"></a>10.删除操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm &lt;文件名称&gt; ------------------&gt; 删除暂存区或分支上的文件, 同时工作区也不需要这个文件</span><br><span class="line"> </span><br><span class="line">git rm -f &lt;文件名称&gt; ---------------&gt; 强制删除文件</span><br><span class="line"></span><br><span class="line">git rm --cached &lt;文件名称&gt; ---------&gt; 删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制</span><br></pre></td></tr></table></figure><h4 id="11-git-推送"><a href="#11-git-推送" class="headerlink" title="11.git 推送"></a>11.git 推送</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master ---------&gt;将文件上传到github上</span><br><span class="line"></span><br><span class="line">git push -f origin master ---------&gt;强制退送到主分支</span><br><span class="line"></span><br><span class="line">git remote ------------------------&gt;查看远程仓库名称 默认 origin</span><br><span class="line"></span><br><span class="line">git remote -v ---------------------&gt;查看当前的远程仓库名称和对应的地址</span><br></pre></td></tr></table></figure><div class="wyx-code-block"><img src="https://images2018.cnblogs.com/blog/917454/201805/917454-20180506204135771-1856011569.png" referrerpolicy="no-referrer"></div><h4 id="12-克隆仓库"><a href="#12-克隆仓库" class="headerlink" title="12.克隆仓库"></a>12.克隆仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h4 id="13-创建分支"><a href="#13-创建分支" class="headerlink" title="13.创建分支"></a>13.创建分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch ------------------------&gt;：查看本地分支列表</span><br><span class="line"></span><br><span class="line">git branch &lt;分支名称&gt; --------------&gt;:新建分支</span><br><span class="line"></span><br><span class="line">git checkout -b &lt;分支名称&gt; ---------&gt;：新建并切换分支</span><br><span class="line"></span><br><span class="line">git checkout &lt;分支名称&gt; ------------&gt;:切换分支</span><br></pre></td></tr></table></figure><h4 id="14-当前分支合并指定分支"><a href="#14-当前分支合并指定分支" class="headerlink" title="14.当前分支合并指定分支"></a>14.当前分支合并指定分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><h4 id="15-更新本地仓库"><a href="#15-更新本地仓库" class="headerlink" title="15.更新本地仓库"></a>15.更新本地仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch --all ---------&gt;:更新git remote 中所有的远程仓库所包含分支的最新commit-id </span><br><span class="line"></span><br><span class="line">git pull ----------------&gt;:将本地库更新至远程库的最新状态</span><br></pre></td></tr></table></figure><h4 id="16-获取秘钥，并查看秘钥"><a href="#16-获取秘钥，并查看秘钥" class="headerlink" title="16.获取秘钥，并查看秘钥"></a>16.获取秘钥，并查看秘钥</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &lt;邮件名称&gt; -------&gt;获取秘钥</span><br><span class="line"></span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub -------&gt;查看秘钥</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>study</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 完善及优化</title>
    <url>/2020/06/15/hexo/hexo%20%E5%AE%8C%E5%96%84%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="Hexo-完善目录"><a href="#Hexo-完善目录" class="headerlink" title="Hexo 完善目录"></a>Hexo 完善目录</h3><h4 id="1-添加分类"><a href="#1-添加分类" class="headerlink" title="1. 添加分类"></a>1. 添加分类</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>然后将以下复制到/source/categories/index.md文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line">layout: <span class="string">"categories"</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客上方添加 categories 属性配置即可</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: Hexo 完善及优化</span><br><span class="line">categories: 技术</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="2-添加标签"><a href="#2-添加标签" class="headerlink" title="2. 添加标签"></a>2. 添加标签</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>然后将以下复制到/source/tags/index.md文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">layout: <span class="string">"tags"</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客上方添加 tags 属性配置即可</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: Hexo 完善及优化</span><br><span class="line">tags: study</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="3-添加文章目录"><a href="#3-添加文章目录" class="headerlink" title="3. 添加文章目录"></a>3. 添加文章目录</h4><p>将以下配置复制到你ayer目录下的 _config.yml 里：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Toc</span></span><br><span class="line">toc: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当然你可能并不想所有文章都生成悬浮目录，你可以在文章顶部的配置中加一行来进行关闭：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">no_toc: <span class="literal">true</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="更换主题皮肤"><a href="#更换主题皮肤" class="headerlink" title="更换主题皮肤"></a>更换主题皮肤</h3><p>风格不喜欢？换之。</p><p>更换主题流程：下载主题 -&gt; 配置主题，以 ayer 为例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载到themes文件夹下</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/shen-yu/hexo-theme-ayer.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改根目录下 _config.yml 配置</span></span><br><span class="line">theme: ayer</span><br></pre></td></tr></table></figure><p>主题配置信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧边栏菜单</span></span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  归档: /archives</span><br><span class="line">  分类: /categories</span><br><span class="line">  标签: /tags</span><br><span class="line">  摄影: http://shenyu-vip.lofter.com</span><br><span class="line">  旅行: /tags/旅行/</span><br><span class="line">  关于我: /2019/about</span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点次标题和打字动效</span></span><br><span class="line"><span class="comment"># https://github.com/mattboldt/typed.js</span></span><br><span class="line">subtitle:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>  <span class="comment"># 是否开启动效</span></span><br><span class="line">  text: 面朝大海，春暖花开  <span class="comment"># 显示的文字</span></span><br><span class="line">  text2: 愿你一生努力，一生被爱   <span class="comment"># 滚动播放，如果不需要可以留空</span></span><br><span class="line">  text3: 想要的都拥有，得不到的都释怀  <span class="comment"># 最多支持三段文字</span></span><br><span class="line">  startDelay: 0   <span class="comment"># 延迟时间</span></span><br><span class="line">  typeSpeed: 200  <span class="comment"># 打字速度</span></span><br><span class="line">  loop: <span class="literal">true</span>  <span class="comment"># 是否循环</span></span><br><span class="line">  backSpeed: 100  <span class="comment"># 回退速度</span></span><br><span class="line">  showCursor: <span class="literal">true</span>  <span class="comment"># 是否显示光标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站图标和侧边栏logo</span></span><br><span class="line">favicon: /favicon.ico</span><br><span class="line">logo: /images/ayer-side.svg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封面配置</span></span><br><span class="line"><span class="comment"># enable-是否启用封面；path-封面背景图；logo-封面logo</span></span><br><span class="line">cover:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  path: /images/cover1.jpg  <span class="comment"># /source/images目录下附送多张精美壁纸，可任意更换</span></span><br><span class="line">  logo: /images/ayer.svg  <span class="comment"># 如果不要直接设置成false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面顶部进度条  </span></span><br><span class="line">progressBar: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网易云音乐插件</span></span><br><span class="line">music:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 播放器尺寸类型(1：小尺寸、2：大尺寸)</span></span><br><span class="line">  <span class="built_in">type</span>: 1</span><br><span class="line">  id: 518895142  <span class="comment"># 网易云分享的音乐ID(更换音乐请更改此配置项)</span></span><br><span class="line">  autoPlay: <span class="literal">true</span>  <span class="comment"># 是否开启自动播放</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章配置</span></span><br><span class="line"><span class="comment"># 文章太长，截断按钮文字(在需要截断的行增加此标记：&lt;!--more--&gt;)</span></span><br><span class="line">excerpt_link: 阅读更多...</span><br><span class="line"><span class="comment"># 如果你嫌每篇文章手动加more标记比较麻烦，又不想在首页全文显示，可以把excerpt_all设置成true，这样首页只会显示文章归档</span></span><br><span class="line">excerpt_all: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启代码复制按钮</span></span><br><span class="line">copy_btn: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否开启文章分享按钮</span></span><br><span class="line">share_enable: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 国内的社交平台(If you are not in China, maybe you prefer to set:false)</span></span><br><span class="line">share_china: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 文章分享文字</span></span><br><span class="line">share_text: 分享</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页文字</span></span><br><span class="line">nav_text:</span><br><span class="line">  page_prev: 上一页</span><br><span class="line">  page_next: 下一页</span><br><span class="line">  post_prev: 上一篇</span><br><span class="line">  post_next: 下一篇</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章页是否显示目录</span></span><br><span class="line">toc: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章中的图片是否支持点击放大</span></span><br><span class="line">image_viewer: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="comment"># 是否开启字数统计(关闭请设置enable为false)</span></span><br><span class="line"><span class="comment"># 也可以单独在md文件里Front-matter设置`no_word_count: true`属性，来自定义关闭字数统计</span></span><br><span class="line">word_count:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 只在文章详情显示(不在首页显示)</span></span><br><span class="line">  only_article_visit: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="comment"># 打赏type设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-默认开启所有文章均有打赏，如果有些文章你不需要，请在文章对应的md文件里设置no_reward:true</span></span><br><span class="line">reward_type: 1</span><br><span class="line"><span class="comment"># 打赏wording</span></span><br><span class="line">reward_wording: <span class="string">'请我喝杯咖啡吧~'</span></span><br><span class="line"><span class="comment"># 支付宝二维码图片地址，跟你设置logo的方式一样。比如：/images/alipay.jpg</span></span><br><span class="line">alipay: /images/alipay.jpg</span><br><span class="line"><span class="comment"># 微信二维码图片地址</span></span><br><span class="line">weixin: /images/wechat.jpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 版权声明</span></span><br><span class="line"><span class="comment"># 版权声明type设定：0-关闭版权声明； 1-文章对应的md文件里有copyright: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class="line">copyright_type: 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用搜索</span></span><br><span class="line">search: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS订阅(先安装hexo-generator-feed插件，再去博客根目录config进行配置)</span></span><br><span class="line"><span class="comment"># 不想显示可以直接留空</span></span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用黑夜模式开关</span></span><br><span class="line">darkmode: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面点击小红心(开启请设置为true)</span></span><br><span class="line">clickLove: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面宽度自定义（不建议修改，可能造成布局混乱），article_width文章宽度，sidebar_width侧边栏宽度</span></span><br><span class="line">layout:</span><br><span class="line">  article_width: 80rem</span><br><span class="line">  sidebar_width: 8rem</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 评论：1、Valine(推荐)；2、Gitalk</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、Valine[一款快速、简洁且高效的无后端评论系统](https://github.com/xCss/Valine)</span></span><br><span class="line"><span class="comment"># 启用Valine必须先创建leancloud应用， 注册账号后获取 id|key 填入即可</span></span><br><span class="line">leancloud:  </span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  app_id: <span class="comment">#</span></span><br><span class="line">  app_key: <span class="comment">#</span></span><br><span class="line"><span class="comment"># Valine配置(如果有些文章你想关闭评论，请在文章对应的md文件里设置no_valine:true)</span></span><br><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  verify: <span class="literal">false</span> <span class="comment"># 是否开启防垃圾评论验证</span></span><br><span class="line">  notify: <span class="literal">false</span> <span class="comment"># 是否开启邮件提醒(https://valine.js.org/notify.html)</span></span><br><span class="line">  avatar: mp <span class="comment"># 头像样式(https://valine.js.org/avatar.html)</span></span><br><span class="line">  placeholder: 给我的文章加点评论吧~ <span class="comment"># placeholder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、Gitalk(https://github.com/gitalk/gitalk)</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span> <span class="comment"># true</span></span><br><span class="line">  clientID: <span class="comment"># GitHub Application Client ID</span></span><br><span class="line">  clientSecret: <span class="comment"># Client Secret</span></span><br><span class="line">  repo: <span class="comment"># Repository name</span></span><br><span class="line">  owner: <span class="comment"># GitHub ID</span></span><br><span class="line">  admin: <span class="comment"># GitHub ID</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># GitHub Ribbons-封面右上角的forkme，换样式直接在source/images目录下替换forkme图片</span></span><br><span class="line">github: </span><br><span class="line">  <span class="comment"># (关闭请设置为false)</span></span><br><span class="line">  url: https://github.com/Shen-Yu/hexo-theme-ayer</span><br><span class="line"></span><br><span class="line"><span class="comment"># fancybox(仅用于相册展示，若需要可配置albums)</span></span><br><span class="line">fancybox: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问量统计(不蒜子)</span></span><br><span class="line">busuanzi:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 友盟cnzz统计(url填js代码src链接)</span></span><br><span class="line">cnzz:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  url: <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line">google_analytics: <span class="string">''</span></span><br><span class="line"><span class="comment"># 百度统计</span></span><br><span class="line">baidu_analytics: <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mathjax数学公式</span></span><br><span class="line">mathjax: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Katex数学公式(allpost设置为false时只有头部设置math:true的文章才开启)</span></span><br><span class="line">katex:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span> <span class="comment"># true</span></span><br><span class="line">  allpost: <span class="literal">true</span></span><br><span class="line">  copy_tex: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站成立年份(默认为 2019，若填入年份小于当前年份，则显示为 2018-2019 类似的格式)</span></span><br><span class="line">since: 2019</span><br><span class="line"></span><br><span class="line"><span class="comment">#是否显示页脚信息(建议保留，有助于本主题的推广)</span></span><br><span class="line">pageFooter: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ICP备案信息尾部显示</span></span><br><span class="line">icp:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  url: <span class="string">'http://www.beian.miit.gov.cn/'</span> <span class="comment"># 备案链接</span></span><br><span class="line">  text: <span class="string">'浙ICP备88888888'</span> <span class="comment"># 备案信息</span></span><br></pre></td></tr></table></figure><h3 id="插件安装及使用"><a href="#插件安装及使用" class="headerlink" title="插件安装及使用"></a>插件安装及使用</h3><h4 id="1-hexo-generator-searchdb-搜索"><a href="#1-hexo-generator-searchdb-搜索" class="headerlink" title="1. hexo-generator-searchdb 搜索"></a>1. hexo-generator-searchdb 搜索</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后将以下配置复制到你博客根目录下的 _config.yml 里（注意不是ayer目录下的）:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-generator-searchdb</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure><h4 id="2-hexo-generator-index-pin-top-文章置顶"><a href="#2-hexo-generator-index-pin-top-文章置顶" class="headerlink" title="2. hexo-generator-index-pin-top 文章置顶"></a>2. hexo-generator-index-pin-top 文章置顶</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客中配置 top 参数 （数值越大排名越靠前）：如下所示</span></span><br><span class="line">---</span><br><span class="line">title: 我想静静</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="3-hexo-blog-encrypt-文章加密"><a href="#3-hexo-blog-encrypt-文章加密" class="headerlink" title="3. hexo-blog-encrypt 文章加密"></a>3. hexo-blog-encrypt 文章加密</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根目录下的 _config.yml 里配置全局密码:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#该密码为全局默认密码</span></span><br><span class="line">encrypt: </span><br><span class="line">  password: theShy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客文章中配置</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 我想静静</span><br><span class="line">encrypt: <span class="literal">true</span> <span class="comment"># 是否开启密码</span></span><br><span class="line">enc_pwd: wxjj <span class="comment"># 文章独立密码（可选）</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="4-hexo-helper-live2d-添加二次元看板娘"><a href="#4-hexo-helper-live2d-添加二次元看板娘" class="headerlink" title="4. hexo-helper-live2d 添加二次元看板娘"></a>4. hexo-helper-live2d 添加二次元看板娘</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save <span class="comment"># 插件安装</span></span><br><span class="line">npm install live2d-widget-model-miku --save <span class="comment"># 模型安装（推荐 miku ）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根目录下的 _config.yml 里配置：</span></span><br><span class="line"></span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  debug: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-miku <span class="comment"># 填写安装的模型名字</span></span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: 0 </span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他模型包安装</span></span><br><span class="line">npm install live2d-widget-model-xxx --save</span><br><span class="line"></span><br><span class="line">xxx 为以下包名</span><br><span class="line"></span><br><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><h4 id="5-hexo-neat-打包压缩插件"><a href="#5-hexo-neat-打包压缩插件" class="headerlink" title="5. hexo-neat 打包压缩插件"></a>5. hexo-neat 打包压缩插件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根目录下的 _config.yml 里配置：</span></span><br><span class="line"></span><br><span class="line">neat_enable: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html</span></span><br><span class="line">neat_html:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line"><span class="comment"># 压缩css</span></span><br><span class="line">neat_css:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">  - <span class="string">'**/*.min.css'</span></span><br><span class="line">  - <span class="string">'**/needsharebutton.css'</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line">neat_js:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">  - <span class="string">'**/*.min.js'</span></span><br><span class="line">  - <span class="string">'**/jquery.fancybox.pack.js'</span></span><br><span class="line">  - <span class="string">'**/index.js'</span></span><br><span class="line">  - <span class="string">'**/waifu-tips.js'</span></span><br><span class="line">  - <span class="string">'**/iframe.js'</span></span><br><span class="line">  - <span class="string">'**/fireworks.js'</span></span><br><span class="line">  - <span class="string">'**/clickBoom1.js'</span></span><br><span class="line">  - <span class="string">'**/clickBoom2.js'</span></span><br></pre></td></tr></table></figure><h4 id="6-Valine-评论系统"><a href="#6-Valine-评论系统" class="headerlink" title="6. Valine 评论系统"></a>6. Valine 评论系统</h4><p>1、Valine<a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">一款快速、简洁且高效的无后端评论系统</a></p><p>打开官网，注册认证后创建leancloud应用， 获取 id|key 填入即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ayer主题下的 _config.yml 里配置：</span></span><br><span class="line"></span><br><span class="line">leancloud:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  app_id: <span class="comment"># 你的app_id</span></span><br><span class="line">  app_key: <span class="comment"># 你的app_key</span></span><br><span class="line"><span class="comment"># Valine配置</span></span><br><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  avatar: wavatar <span class="comment"># 头像样式(https://valine.js.org/avatar.html)</span></span><br><span class="line">  placeholder: 给我的文章加点评论吧~ <span class="comment"># placeholder</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>study</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我想静静</title>
    <url>/2020/06/09/love/%E6%88%91%E6%83%B3%E9%9D%99%E9%9D%99/</url>
    <content><![CDATA[<script src=/js/crypto-js.js></script>
<script>
function doDecrypt (pwd, onError) {
	console.log('in doDecrypt');
	const txt = document.getElementById('enc_content').innerHTML;
	let plantext;
	try {
		const bytes = CryptoJS.AES.decrypt(txt, pwd);
		var plaintext = bytes.toString(CryptoJS.enc.Utf8);
	} catch(err) {
		if(onError) {
			onError(err);
		}
		return;
	}
	document.getElementById('enc_content').innerHTML = plaintext;
	document.getElementById('enc_content').style.display = 'block';
	document.getElementById('enc_passwd').style.display = 'none';
	if(typeof MathJax !== 'undefined') {
		MathJax.Hub.Queue(
			['resetEquationNumbers', MathJax.InputJax.TeX],
			['PreProcess', MathJax.Hub],
			['Reprocess', MathJax.Hub]
		);
	}
}
</script>
<div id="enc_content" style="display:none"></div>
<div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div>
<script>
var onError = function(error) {
	document.getElementById("enc_error").innerHTML = "password error!"
};
function decrypt() {
var passwd = document.getElementById("enc_pwd_input").value;
console.log(passwd);
doDecrypt(passwd, onError);
}
</script>
</div>]]></content>
      <categories>
        <category>Love</category>
      </categories>
      <tags>
        <tag>love</tag>
        <tag>live</tag>
      </tags>
  </entry>
  <entry>
    <title>获取当前页面的URL信息</title>
    <url>/2020/06/10/javaScript/%E8%8E%B7%E5%8F%96URL%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h3 id="获取当前页面的URL信息"><a href="#获取当前页面的URL信息" class="headerlink" title="获取当前页面的URL信息"></a>获取当前页面的URL信息</h3><h4 id="1-window-location-pathname"><a href="#1-window-location-pathname" class="headerlink" title="1. window.location.pathname"></a>1. window.location.pathname</h4><p><font face="STCAIYUN" color="#333">设置或获取对象指定的文件名或路径。</font></p><ul><li><font face="STCAIYUN" color="#34a853">window.location.pathname</font></li><li><font face="STCAIYUN" color="#19a1f8">例：<a href="http://localhost:8086/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/topic/index?topicId=361</a></font></li><li><font face="STCAIYUN" color="#fbbc05">console.log(window.location.pathname); </font><font face="STCAIYUN" color="#ea4335">则输出：/topic/index</font></li></ul><h4 id="2-window-location-href"><a href="#2-window-location-href" class="headerlink" title="2. window.location.href"></a>2. window.location.href</h4><p><font face="STCAIYUN" color="#333">设置或获取整个 URL 为字符串。</font></p><ul><li><font face="STCAIYUN" color="#34a853">window.location.href</font></li><li><font face="STCAIYUN" color="#19a1f8">例：<a href="http://localhost:8086/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/topic/index?topicId=361</a></font></li><li><font face="STCAIYUN" color="#fbbc05">console.log(window.location.href); </font><font face="STCAIYUN" color="#ea4335">则输出：<a href="http://localhost:8086/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/topic/index?topicId=361</a></font></li></ul><h4 id="3-window-location-port"><a href="#3-window-location-port" class="headerlink" title="3. window.location.port"></a>3. window.location.port</h4><p><font face="STCAIYUN" color="#333">设置或获取与 URL 关联的端口号码。</font></p><ul><li><font face="STCAIYUN" color="#34a853">window.location.port</font></li><li><font face="STCAIYUN" color="#19a1f8">例：<a href="http://localhost:8086/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/topic/index?topicId=361</a></font></li><li><font face="STCAIYUN" color="#fbbc05">console.log(window.location.port); </font><font face="STCAIYUN" color="#ea4335">则输出：8086</font></li></ul><h4 id="4-window-location-protocol"><a href="#4-window-location-protocol" class="headerlink" title="4. window.location.protocol"></a>4. window.location.protocol</h4><p><font face="STCAIYUN" color="#333">设置或获取 URL 的协议部分。</font></p><ul><li><font face="STCAIYUN" color="#34a853">window.location.protocol</font></li><li><font face="STCAIYUN" color="#19a1f8">例：<a href="http://localhost:8086/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/topic/index?topicId=361</a></font></li><li><font face="STCAIYUN" color="#fbbc05">console.log(window.location.protocol); </font><font face="STCAIYUN" color="#ea4335">则输出：http:</font></li></ul><h4 id="5-window-location-hash"><a href="#5-window-location-hash" class="headerlink" title="5. window.location.hash"></a>5. window.location.hash</h4><p><font face="STCAIYUN" color="#333">设置或获取 href 属性中在井号“#”后面的分段。</font></p><ul><li><font face="STCAIYUN" color="#34a853">window.location.hash</font></li><li><font face="STCAIYUN" color="#19a1f8">例：<a href="http://localhost:8086/#/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/#/topic/index?topicId=361</a></font></li><li><font face="STCAIYUN" color="#fbbc05">console.log(window.location.hash); </font><font face="STCAIYUN" color="#ea4335">则输出：#/topic/index?topicId=361</font></li></ul><h4 id="6-window-location-host"><a href="#6-window-location-host" class="headerlink" title="6. window.location.host"></a>6. window.location.host</h4><p><font face="STCAIYUN" color="#333">设置或获取 location 或 URL 的 hostname 和 port 号码。</font></p><ul><li><font face="STCAIYUN" color="#34a853">window.location.host</font></li><li><font face="STCAIYUN" color="#19a1f8">例：<a href="http://localhost:8086/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/topic/index?topicId=361</a></font></li><li><font face="STCAIYUN" color="#fbbc05">console.log(window.location.host); </font><font face="STCAIYUN" color="#ea4335">则输出：http:localhost:8086</font></li></ul><h4 id="7-window-location-search"><a href="#7-window-location-search" class="headerlink" title="7. window.location.search"></a>7. window.location.search</h4><p><font face="STCAIYUN" color="#333">设置或获取 href 属性中跟在问号后面的部分。</font></p><ul><li><font face="STCAIYUN" color="#34a853">window.location.search</font></li><li><font face="STCAIYUN" color="#19a1f8">例：<a href="http://localhost:8086/topic/index?topicId=361" target="_blank" rel="noopener">http://localhost:8086/topic/index?topicId=361</a></font></li><li><font face="STCAIYUN" color="#fbbc05">console.log(window.location.search); </font><font face="STCAIYUN" color="#ea4335">则输出：?topicId=361</font></li></ul><h4 id="8-window-location-属性整理"><a href="#8-window-location-属性整理" class="headerlink" title="8. window.location 属性整理"></a>8. window.location 属性整理</h4><table><thead><tr><th align="center">属性</th><th align="center">操作</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">hash</td><td align="center">设置或获取</td><td align="center">井号 ‘#’ 后面的分段</td></tr><tr><td align="center">host</td><td align="center">设置或获取</td><td align="center">hostname 和 port 号码</td></tr><tr><td align="center">hostname</td><td align="center">设置或获取</td><td align="center">主机名称部分</td></tr><tr><td align="center">href</td><td align="center">设置或获取</td><td align="center">整个 URL 为字符串</td></tr><tr><td align="center">pathname</td><td align="center">设置或获取</td><td align="center">文件名或路径</td></tr><tr><td align="center">port</td><td align="center">设置或获取</td><td align="center">关联的端口号码</td></tr><tr><td align="center">search</td><td align="center">设置或获取</td><td align="center">协议部分</td></tr><tr><td align="center">search</td><td align="center">设置或获取</td><td align="center">问号 ‘？’ 后面的部分</td></tr></tbody></table>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>study</tag>
        <tag>web</tag>
        <tag>html5</tag>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 高级</title>
    <url>/2020/08/25/python/2.python%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="Python-高级"><a href="#Python-高级" class="headerlink" title="Python 高级"></a>Python 高级</h1><h2 id="转载雪狐96博客"><a href="#转载雪狐96博客" class="headerlink" title="转载雪狐96博客"></a>转载雪狐96博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ friendLinks = [雪狐96博客链接](https://www.xuehu96.com/)</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.xuehu96.com/" target="_blank" rel="noopener">查看雪狐96博客</a></li><li><a href="https://www.xuehu96.com/" target="_blank" rel="noopener">https://www.xuehu96.com/</a></li></ul><h2 id="和-is"><a href="#和-is" class="headerlink" title="== 和 is"></a>== 和 is</h2><blockquote><p>== 判断值是否相等 ， is判断是否指向的是一个东西</p></blockquote><h2 id="深拷贝-浅拷贝"><a href="#深拷贝-浅拷贝" class="headerlink" title="深拷贝 浅拷贝"></a>深拷贝 浅拷贝</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">c = copy.deepcopy(a) <span class="comment"># 完成深拷贝</span></span><br><span class="line"></span><br><span class="line">如果c是引用，引用指向的内容也拷贝（递归）</span><br><span class="line"></span><br><span class="line">c = copy.copy(a) <span class="comment"># 比deep浅</span></span><br><span class="line"></span><br><span class="line">判断是否是可变类型，如果是不可变类型，不copy，如果是可变类型，只copy一层</span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bin(<span class="number">18</span>)<span class="comment">#0b  </span></span><br><span class="line">oct(<span class="number">18</span>)<span class="comment">#0o  </span></span><br><span class="line">hex(<span class="number">18</span>)<span class="comment">#0x  </span></span><br><span class="line"></span><br><span class="line">int(<span class="string">"0x12"</span>,<span class="number">16</span>) <span class="comment">#到10进制</span></span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`&amp; | ^  ~ &lt;&lt; &gt;&gt;`</span><br></pre></td></tr></table></figure><h2 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">- `xx` 公有变量</span><br><span class="line">- `_xx` 单下划线 进制<span class="keyword">from</span> xx <span class="keyword">import</span> * ，类对象和子类可以访问</span><br><span class="line">- `__xx` 避免和子类命名冲突，子类访问不到（名字重整）</span><br><span class="line">- `__xx__` 魔法对象或属性</span><br><span class="line">- `xx_` 避免和python关键字冲突</span><br></pre></td></tr></table></figure><h2 id="property-属性"><a href="#property-属性" class="headerlink" title="property (属性)"></a>property (属性)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">       self.__num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNum</span><span class="params">(self, newNum)</span>:</span></span><br><span class="line">        print(<span class="string">"----setter----"</span>)</span><br><span class="line">        self.__num = newNum</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNum</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"----getter----"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__num</span><br><span class="line"></span><br><span class="line">    num = property(getNum, setNum)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line"><span class="comment">#print(t.__num)</span></span><br><span class="line"><span class="comment">#t.__num = 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(t.getNum())</span></span><br><span class="line"><span class="comment">#t.setNum(50)</span></span><br><span class="line"><span class="comment">#print(t.getNum())</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"-"</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">t.num = <span class="number">200</span> <span class="comment">#相当于调用了 t.setNum(200)</span></span><br><span class="line"></span><br><span class="line">print(t.num) <span class="comment">#相当于调用了 t.getNum()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意点:</span></span><br><span class="line"><span class="comment">#t.num 到底是调用getNum()还是setNum(),要根据实际的场景来判断,</span></span><br><span class="line"><span class="comment">#1. 如果是给t.num赋值 那么一定调用setNum()</span></span><br><span class="line"><span class="comment">#2. 如果是获取t.num的值,那么就一定调用getNum()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#property的作用:相当于把方法进行了封装, 开发者在对属性设置数据的时候更方便</span></span><br><span class="line"></span><br><span class="line">=================================================</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">       self.__num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"----getter----"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__num</span><br><span class="line"></span><br><span class="line"><span class="meta">    @num.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(self, newNum)</span>:</span></span><br><span class="line">        print(<span class="string">"----setter----"</span>)</span><br><span class="line">        self.__num = newNum</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line"></span><br><span class="line">t.num = <span class="number">200</span> <span class="comment">#相当于调用了 t.setNum(200)</span></span><br><span class="line"></span><br><span class="line">print(t.num) <span class="comment">#相当于调用了 t.getNum()</span></span><br></pre></td></tr></table></figure><h2 id="import导入模块"><a href="#import导入模块" class="headerlink" title="import导入模块"></a>import导入模块</h2><blockquote><p>搜索路径： sys.path</p></blockquote><p>添加路径 sys.path.append(“/home”)</p><h3 id="重新导入"><a href="#重新导入" class="headerlink" title="重新导入"></a>重新导入</h3><p>在程序没退出的情况下 修改模块 新功能不能展示</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> imp <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">reload(test)</span><br></pre></td></tr></table></figure><h3 id="循环导入"><a href="#循环导入" class="headerlink" title="循环导入"></a>循环导入</h3><h2 id="设计一个总模块，分别调用各个模块，防止之间的相互调用，造成循环"><a href="#设计一个总模块，分别调用各个模块，防止之间的相互调用，造成循环" class="headerlink" title="设计一个总模块，分别调用各个模块，防止之间的相互调用，造成循环"></a>设计一个总模块，分别调用各个模块，防止之间的相互调用，造成循环</h2><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>可迭代对象：</p><ul><li>list tuple dict set str</li><li>generator （生成器）</li></ul><hr><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"--装饰--"</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    prinf(<span class="string">"----f1-----"</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h3 id="对有参数的函数装饰"><a href="#对有参数的函数装饰" class="headerlink" title="对有参数的函数装饰"></a>对有参数的函数装饰</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(a,b)</span>:</span> <span class="comment">#如果没有ab 会调用失败</span></span><br><span class="line">        print(<span class="string">"--执行前装饰--"</span>)</span><br><span class="line">        func(a,b)</span><br><span class="line">        print(<span class="string">"--执行后装饰--"</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a,b)</span>:</span> <span class="comment"># 如果函数需要两个参数</span></span><br><span class="line">    prinf(<span class="string">"----f1-%d-%d---"</span>%(a,b))</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>参数改为<em>args,*</em>kwargs</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span> </span><br><span class="line">        print(<span class="string">"--执行前装饰--"</span>)</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">"--执行后装饰--"</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a,b)</span>:</span> </span><br><span class="line">    prinf(<span class="string">"----f1-%d-%d---"</span>%(a,b))</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><h3 id="通用装饰器"><a href="#通用装饰器" class="headerlink" title="通用装饰器"></a>通用装饰器</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_in</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        ret = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func_in</span><br><span class="line"></span><br><span class="line"><span class="meta">@w1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="带有参数的装饰器"><a href="#带有参数的装饰器" class="headerlink" title="带有参数的装饰器"></a>带有参数的装饰器</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_arg</span><span class="params">(arg)</span></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">w1</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_in</span><span class="params">()</span>:</span></span><br><span class="line">            ret = func()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> func_in</span><br><span class="line">    <span class="keyword">return</span> w1</span><br><span class="line"></span><br><span class="line"><span class="meta">@func_arg("heihei")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ul><li>globals</li><li>locals</li></ul><h3 id="LEGB"><a href="#LEGB" class="headerlink" title="LEGB"></a>LEGB</h3><blockquote><p>locals -&gt; enclosing function -&gt; globals -&gt; builtins</p></blockquote><ul><li>局部变量</li><li>闭包外面的</li><li>全局</li><li>内建</li></ul><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self.newName)</span>:</span></span><br><span class="line">        self.name = newName</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1.eat = types.MethhodType(eat,p1)</span><br><span class="line">p1.run()</span><br></pre></td></tr></table></figure><h3 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h3><p><strong>slots</strong> = (“name”,”age”) # 限定</p><hr><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><blockquote><p>把计算每个元素的方式保存了，不会马上生成，节省了内存</p></blockquote><ol><li>把列表生成式的中括号改成小括号<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">b = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">next(b) <span class="comment">#0</span></span><br><span class="line">next(b) <span class="comment">#2</span></span><br><span class="line">next(b) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">b.__next__() <span class="comment">#和上面一样</span></span><br></pre></td></tr></table></figure></li><li>写一个函数 加上yield</li></ol><ul><li>yield的返回值是send的内容<blockquote><p>第一次调用需要传none或者先用next</p></blockquote></li></ul><h3 id="生成器完成多任务"><a href="#生成器完成多任务" class="headerlink" title="生成器完成多任务"></a>生成器完成多任务</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---111---"</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---222---"</span>)</span><br><span class="line">        <span class="keyword">yield</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">t1 = test1()</span><br><span class="line">t2 = test2()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    t1.__next__()</span><br><span class="line">    t2.__next__()</span><br></pre></td></tr></table></figure><h1 id="python-多任务"><a href="#python-多任务" class="headerlink" title="python 多任务"></a>python 多任务</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#ret==0子进程  else父进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows 没有fork函数</span></span><br><span class="line">pid = os.fork()</span><br><span class="line">os.getpid()</span><br><span class="line">os.getppid()</span><br></pre></td></tr></table></figure><h2 id="在windows上可以用的fork"><a href="#在windows上可以用的fork" class="headerlink" title="在windows上可以用的fork"></a>在windows上可以用的fork</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#子进程需要执行的代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_proc</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"---子进程---"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'父进程'</span>)</span><br><span class="line">    p = Process(target=run_proc,args=(<span class="string">'test'</span>,))</span><br><span class="line">    print(<span class="string">'子进程将要执行'</span>)</span><br><span class="line">    p.start() </span><br><span class="line">    p.join() <span class="comment"># 等待子进程</span></span><br><span class="line">    print(<span class="string">'子程序结束'</span>)</span><br></pre></td></tr></table></figure><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue(<span class="number">3</span>) <span class="comment"># 不填3就是无限大</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#把q当成参数传入创建进程的函数</span></span><br><span class="line">p = Process(target=write,arg=(q,))</span><br><span class="line"></span><br><span class="line">q.qsize() <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">q.put(<span class="string">'haha'</span>) </span><br><span class="line">q.qsize() <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">q.get() <span class="comment"># 取出添加的第一个</span></span><br><span class="line"></span><br><span class="line">q.empty()</span><br><span class="line">q.full()</span><br><span class="line"></span><br><span class="line">q.get_nowait() <span class="comment"># 如果为空 报异常（放在try里面）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------</span></span><br><span class="line">如果是进程池之间通信 应该使用</span><br><span class="line">q.Manager().Queue()</span><br><span class="line">po = Pool()</span><br><span class="line">po.apply(writer,(q,))</span><br><span class="line">po.close()</span><br><span class="line">po.join()</span><br></pre></td></tr></table></figure><h2 id="process子类"><a href="#process子类" class="headerlink" title="process子类"></a>process子类</h2><ul><li>调父类init</li><li>重写process的run方法</li></ul><h2 id="进程池-Pool"><a href="#进程池-Pool" class="headerlink" title="进程池 Pool"></a>进程池 Pool</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(msg)</span><br><span class="line"></span><br><span class="line">po = Pool(<span class="number">3</span>) <span class="comment"># 定义一个进程池 最大是3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="comment">#po.apply_async(要调用的目标,（传递的参数元组,）)</span></span><br><span class="line">    <span class="comment">#每次循环警徽用空闲出来的进程去调用目标</span></span><br><span class="line">    po.apply_async(worker(i,))<span class="comment"># 非堵塞</span></span><br><span class="line">    po.apply(worker(i,))<span class="comment"># 堵塞 几乎不用</span></span><br><span class="line"></span><br><span class="line">po.close() <span class="comment"># 关闭进程池，不能添加新的任务</span></span><br><span class="line">po.join() <span class="comment">#主进程等待进程池中执行完才结束</span></span><br></pre></td></tr></table></figure><hr><h2 id="线程-Thread"><a href="#线程-Thread" class="headerlink" title="线程 Thread"></a>线程 Thread</h2><blockquote><p>底层 Thread模块 threading模块对Thread包装</p></blockquote><ol><li>函数<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sayAaa</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"aaa"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ = <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = threading.Thread(target=sayAaa)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure></li><li>类<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">'I am '</span>+self.name+<span class="string">' @ '</span>+str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure></li></ol><h3 id="线程之间共享全局变量"><a href="#线程之间共享全局变量" class="headerlink" title="线程之间共享全局变量"></a>线程之间共享全局变量</h3><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">g_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="comment">#这个线程和ｔｅｓｔ2线程都在抢着　对这个锁　进行上锁，如果有１方成功的上锁，那么导致另外</span></span><br><span class="line">    <span class="comment">#一方会堵塞（一直等待）到这个锁被解开为止</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()<span class="comment">#用来对mutex指向的这个锁　进行解锁，，，只要开了锁，那么接下来会让所有因为</span></span><br><span class="line">                    <span class="comment">#这个锁　被上了锁　而堵塞的线程　进行抢着上锁</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test1---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        mutex.acquire()</span><br><span class="line">        g_num += <span class="number">1</span></span><br><span class="line">        mutex.release()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"---test2---g_num=%d"</span>%g_num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一把互斥锁，这个锁默认是没有上锁的</span></span><br><span class="line">mutex = Lock()</span><br><span class="line"></span><br><span class="line">p1 = Thread(target=test1)</span><br><span class="line">p1.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#time.sleep(3) #取消屏蔽之后 再次运行程序，结果会不一样，，，为啥呢？</span></span><br><span class="line"></span><br><span class="line">p2 = Thread(target=test2)</span><br><span class="line">p2.start()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"---g_num=%d---"</span>%g_num)</span><br></pre></td></tr></table></figure><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,Lock</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task1</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> lock1.acquire():</span><br><span class="line">                print(<span class="string">"------Task 1 -----"</span>)</span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                lock2.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task2</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> lock2.acquire():</span><br><span class="line">                print(<span class="string">"------Task 2 -----"</span>)</span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                lock3.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task3</span><span class="params">(Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> lock3.acquire():</span><br><span class="line">                print(<span class="string">"------Task 3 -----"</span>)</span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                lock1.release()</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用Lock创建出的锁默认没有“锁上”</span></span><br><span class="line">lock1 = Lock()</span><br><span class="line"><span class="comment">#创建另外一把锁，并且“锁上”</span></span><br><span class="line">lock2 = Lock()</span><br><span class="line">lock2.acquire()</span><br><span class="line"><span class="comment">#创建另外一把锁，并且“锁上”</span></span><br><span class="line">lock3 = Lock()</span><br><span class="line">lock3.acquire()</span><br><span class="line"></span><br><span class="line">t1 = Task1()</span><br><span class="line">t2 = Task2()</span><br><span class="line">t3 = Task3()</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t3.start()</span><br></pre></td></tr></table></figure><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全局ThreadLocal对象:</span></span><br><span class="line">local_school = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_student</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取当前线程关联的student:</span></span><br><span class="line">    std = local_school.student</span><br><span class="line">    print(<span class="string">'Hello, %s (in %s)'</span> % (std, threading.current_thread().name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_thread</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment"># 绑定ThreadLocal的student:</span></span><br><span class="line">    local_school.student = name</span><br><span class="line">    process_student()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(<span class="string">'dongGe'</span>,), name=<span class="string">'Thread-A'</span>)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(<span class="string">'老王'</span>,), name=<span class="string">'Thread-B'</span>)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><h2 id="异步、回调"><a href="#异步、回调" class="headerlink" title="异步、回调"></a>异步、回调</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"---进程池中的进程---pid=%d,ppid=%d--"</span>%(os.getpid(),os.getppid()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">"----%d---"</span>%i)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hahah"</span> <span class="comment">#返回给了父进程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(args)</span>:</span></span><br><span class="line">    print(<span class="string">"---callback func--pid=%d"</span>%os.getpid()) <span class="comment">#是父进程做的</span></span><br><span class="line">    print(<span class="string">"---callback func--args=%s"</span>%args)</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line">pool.apply_async(func=test,callback=test2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#异步的理解：主进程正在做某件事情，突然　来了一件更需要立刻去做的事情，</span></span><br><span class="line"><span class="comment">#那么这种，在父进程去做某件事情的时候　并不知道是什么时候去做，的模式　就称为异步</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"----主进程-pid=%d----"</span>%os.getpid())</span><br></pre></td></tr></table></figure><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><blockquote><p>Python的线程是假的<br>解决方式： 用C语言写</p></blockquote><p>loop.c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeadLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.py</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载动态库</span></span><br><span class="line">lib = cdll.LoadLibrary(<span class="string">"./libdeadloop.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个子线程，让其执行ｃ语言编写的函数，此函数是一个死循环</span></span><br><span class="line">t = Thread(target=lib.DeadLoop)</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">#主线程，也调用ｃ语言编写的那个死循环函数</span></span><br><span class="line"><span class="comment">#lib.DeadLoop()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>gcc xxx.c -shared -o libxxxx.so</p><hr><h1 id="python3网络编程"><a href="#python3网络编程" class="headerlink" title="python3网络编程"></a>python3网络编程</h1><h2 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h2><ul><li>应用层 （应用层 表示层 会话层）</li><li>传输层 TCP UDP</li><li>网络层 IP ICMP ARP RARP</li><li>链路层（物理层 数据链路层）</li></ul><p>端口号：0-65535<br>知名端口0-1023<br>动态端口1024-65535</p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><ul><li>0和255不能用（0网络号 255广播）</li><li>D类多播</li></ul><blockquote><p>参考资料:<a href="http://www.runoob.com/python3/python3-socket.html" target="_blank" rel="noopener">菜鸟教程</a></p></blockquote><p>socket函数创建<br><code>socket.socket([family[, type[, proto]]])</code></p><ul><li>family: 套接字家族可以使AF_UNIX或者AF_INET</li><li>type: 套接字类型可以根据是面向连接的还是非连接分为SOCK_STREAM或SOCK_DGRAM</li><li>protocol: 一般不填默认为0.</li></ul><p>例如:<br><code>socket.socket(socket.AF_INET, socket.SOCK_STREAM)</code></p><h3 id="server-TCP"><a href="#server-TCP" class="headerlink" title="server TCP"></a>server TCP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># 文件名：server.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 获取本地主机名</span></span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"><span class="comment"># 绑定端口号</span></span><br><span class="line">serversocket.bind((host, port))</span><br><span class="line"><span class="comment"># 设置最大连接数，超过后排队</span></span><br><span class="line">serversocket.listen(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 建立客户端连接</span></span><br><span class="line">    clientsocket, addr = serversocket.accept()</span><br><span class="line">    print(<span class="string">"连接地址: %s"</span> % str(addr))</span><br><span class="line">    msg = <span class="string">'欢迎访问菜鸟教程！'</span> + <span class="string">"\r\n"</span></span><br><span class="line">    clientsocket.send(msg.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    clientsocket.close()</span><br></pre></td></tr></table></figure><h3 id="client-TCP"><a href="#client-TCP" class="headerlink" title="client TCP"></a>client TCP</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># 文件名：client.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 socket 对象</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 获取本地主机名</span></span><br><span class="line">host = socket.gethostname()</span><br><span class="line">port = <span class="number">9999</span><span class="comment"># 设置端口号</span></span><br><span class="line">s.connect((host, port))<span class="comment"># 连接服务，指定主机和端口</span></span><br><span class="line"></span><br><span class="line">msg = s.recv(<span class="number">1024</span>) <span class="comment"># 接收小于 1024 字节的数据</span></span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (msg.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h3 id="UDP-server"><a href="#UDP-server" class="headerlink" title="UDP server"></a>UDP server</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((<span class="string">"127.0.0.1"</span>, <span class="number">6000</span>))</span><br><span class="line">print(<span class="string">"UDP bound on port 6000..."</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"Receive from %s:%s"</span> % addr)</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">b"exit"</span>:</span><br><span class="line">        s.sendto(<span class="string">b"Good bye!\n"</span>, addr)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    s.sendto(<span class="string">b"Hello %s!\n"</span> % data, addr)</span><br></pre></td></tr></table></figure><h3 id="UDP-client"><a href="#UDP-client" class="headerlink" title="UDP client"></a>UDP client</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"> </span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">addr = (<span class="string">"127.0.0.1"</span>, <span class="number">6000</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = input(<span class="string">"Please input your name: "</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    s.sendto(data.encode(), addr)</span><br><span class="line">    response, addr = s.recvfrom(<span class="number">1024</span>) <span class="comment"># 收到的是个元组</span></span><br><span class="line">    print(response.decode())</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">"exit"</span>:</span><br><span class="line">        print(<span class="string">"Session is over from the server %s:%s\n"</span> % addr)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><hr><h2 id="SocketServer类"><a href="#SocketServer类" class="headerlink" title="SocketServer类"></a>SocketServer类</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForkingUDPServer</span><span class="params">(ForkingMixIn, UDPServer)</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ForkingTCPServer</span><span class="params">(ForkingMixIn, TCPServer)</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ThreadingUDPServer</span><span class="params">(ThreadingMixIn, UDPServer)</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ThreadingTCPServer</span><span class="params">(ThreadingMixIn, TCPServer)</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ThreadingUnixStreamServer</span><span class="params">(ThreadingMixIn, UnixStreamServer)</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">ThreadingUnixDatagramServer</span><span class="params">(ThreadingMixIn, UnixDatagramServer)</span></span></span><br></pre></td></tr></table></figure><h3 id="socketserver-TCP-Server"><a href="#socketserver-TCP-Server" class="headerlink" title="socketserver TCP Server"></a>socketserver TCP Server</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTcpHandler</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> data: <span class="keyword">break</span>  <span class="comment"># 此行代码针对linux系统</span></span><br><span class="line">                self.request.send(data.upper())</span><br><span class="line">                print(data)</span><br><span class="line">            <span class="keyword">except</span> ConnectionResetError:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.request.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = socketserver.ThreadingTCPServer((<span class="string">'0.0.0.0'</span>, <span class="number">8180</span>), MyTcpHandler)</span><br><span class="line">    server.serve_forever()</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### socketserver TCP Client</span></span><br><span class="line">```py</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os ,time</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">client.connect((<span class="string">'118.24.137.128'</span>, <span class="number">8180</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="string">'%s hello'</span> % os.getpid()</span><br><span class="line">    client.send(msg.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="socketserver-UDP-Server"><a href="#socketserver-UDP-Server" class="headerlink" title="socketserver UDP Server"></a>socketserver UDP Server</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUdpHandler</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        res=self.request[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">'客户端发来的数据：'</span>,res)</span><br><span class="line"> </span><br><span class="line">        self.request[<span class="number">1</span>].sendto(res.upper(),self.client_address)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server=socketserver.ThreadingUDPServer((<span class="string">'0.0.0.0'</span>,<span class="number">8888</span>),MyUdpHandler)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><h3 id="socketserver-UDP-Client"><a href="#socketserver-UDP-Client" class="headerlink" title="socketserver UDP Client"></a>socketserver UDP Client</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os, time</span><br><span class="line"></span><br><span class="line">client = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = <span class="string">'%s hello'</span> % os.getpid()</span><br><span class="line">    client.sendto(msg.encode(<span class="string">'utf-8'</span>), (<span class="string">'118.24.137.128'</span>, <span class="number">8888</span>))</span><br><span class="line">    data, server_addr = client.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="END"><a href="#END" class="headerlink" title="END"></a><strong>END</strong></h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>python3学习笔记 图书馆TP311.561 143：1</li><li><a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">网页: 菜鸟教程 – 学习python3</a></li></ul><h2 id="一些零碎代码"><a href="#一些零碎代码" class="headerlink" title="一些零碎代码"></a>一些零碎代码</h2><h3 id="UART-py"><a href="#UART-py" class="headerlink" title="UART py"></a>UART py</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*</span></span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 打开串口</span></span><br><span class="line">ser = serial.Serial(<span class="string">"/dev/ttyUSB0"</span>, <span class="number">115200</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获得接收缓冲区字符</span></span><br><span class="line">        count = ser.inWaiting()</span><br><span class="line">        <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 读取内容并回显</span></span><br><span class="line">            recv = ser.read(count)</span><br><span class="line">            print(recv)</span><br><span class="line">            <span class="comment">#ser.write(recv)</span></span><br><span class="line">        <span class="comment"># 清空接收缓冲区</span></span><br><span class="line">        ser.flushInput()</span><br><span class="line">        <span class="comment"># 必要的软件延时</span></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">if</span> ser != <span class="literal">None</span>:</span><br><span class="line">            ser.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬虫</title>
    <url>/2020/06/15/python/python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h3 id="爬取自考365试题及答案"><a href="#爬取自考365试题及答案" class="headerlink" title="爬取自考365试题及答案"></a>爬取自考365试题及答案</h3><p>简单介绍一下 “需求”: “自考365” 下载一批量的试题以及答案，如下图：<a href="https://www.zikao365.com/shiti/downlist_search.shtm" target="_blank" rel="noopener">https://www.zikao365.com/shiti/downlist_search.shtm</a></p><div class="wyx-code-block"><img src="/static/images/spider_1.jpg" referrerpolicy="no-referrer"></div><h4 id="1-浏览器抓包"><a href="#1-浏览器抓包" class="headerlink" title="1. 浏览器抓包"></a>1. 浏览器抓包</h4><p>观察数据参数的传递</p><div class="wyx-code-block"><img src="/static/images/spider_2.jpg" referrerpolicy="no-referrer"></div><h4 id="2-了解传递的参数"><a href="#2-了解传递的参数" class="headerlink" title="2. 了解传递的参数"></a>2. 了解传递的参数</h4><p>在浏览器抓包中我们看不到实际传递了哪些参数（unable to decode value），因此这里可以使用 Fiddler 进行抓包或者使用下面的一种方式，任意一种都行</p><div class="wyx-code-block"><img src="/static/images/spider_3.jpg" referrerpolicy="no-referrer"></div><p>然后使用文本框粘贴刚才复制的内容：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">curl <span class="string">'https://www.zikao365.com/shiti/downlist_search.shtm'</span> \</span><br><span class="line">  -H <span class="string">'Connection: keep-alive'</span> \</span><br><span class="line">  -H <span class="string">'Cache-Control: max-age=0'</span> \</span><br><span class="line">  -H <span class="string">'Upgrade-Insecure-Requests: 1'</span> \</span><br><span class="line">  -H <span class="string">'Origin: https://www.zikao365.com'</span> \</span><br><span class="line">  -H <span class="string">'Content-Type: application/x-www-form-urlencoded'</span> \</span><br><span class="line">  -H <span class="string">'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36'</span> \</span><br><span class="line">  -H <span class="string">'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span> \</span><br><span class="line">  -H <span class="string">'Sec-Fetch-Site: same-origin'</span> \</span><br><span class="line">  -H <span class="string">'Sec-Fetch-Mode: navigate'</span> \</span><br><span class="line">  -H <span class="string">'Sec-Fetch-User: ?1'</span> \</span><br><span class="line">  -H <span class="string">'Sec-Fetch-Dest: document'</span> \</span><br><span class="line">  -H <span class="string">'Referer: https://www.zikao365.com/shiti/downlist_search.shtm'</span> \</span><br><span class="line">  -H <span class="string">'Accept-Language: zh-CN,zh;q=0.9,zh-TW;q=0.8,en-US;q=0.7,en;q=0.6'</span> \</span><br><span class="line">  --data-raw <span class="string">'KeyWord=%C2%ED%BF%CB%CB%BC%D6%F7%D2%E5&amp;monthHidden=%C8%AB%B2%BF&amp;month=&amp;yearHidden=%C8%AB%B2%BF&amp;year='</span> \</span><br><span class="line">  --compressed</span><br></pre></td></tr></table></figure><p>留意一下倒数第二行 KeyWord=%C2%ED%BF%CB%CB%BC%D6%F7%D2%E5结合浏览器抓包了解到KeyWord，这里其实就是上面搜索传递的内容啦!!!</p><h4 id="3-如何分页下载"><a href="#3-如何分页下载" class="headerlink" title="3. 如何分页下载"></a>3. 如何分页下载</h4><p>来到这里我们就能获取一页的列表数据了，那么获取第二页传递什么参数呢？点击 下一页 然后观察抓包情况 <a href="https://www.zikao365.com/shiti/downlist_search.shtm?page=2" target="_blank" rel="noopener">https://www.zikao365.com/shiti/downlist_search.shtm?page=2</a> 如上，url 发生了一点点变化了，「添加了一个参数page，也就是说page=2代表第2页」</p><h4 id="4-查找下载链接"><a href="#4-查找下载链接" class="headerlink" title="4. 查找下载链接"></a>4. 查找下载链接</h4><div class="wyx-code-block"><img src="/static/images/spider_4.jpg" referrerpolicy="no-referrer"></div><p>随便点击一个链接进入试题详情页如下：<a href="https://www.zikao365.com/shiti/download-427-16827.html" target="_blank" rel="noopener">https://www.zikao365.com/shiti/download-427-16827.html</a> 点击立即下载发现需要登录</p><p>摆在眼前只有三条路：</p><ul><li>注册一个账号，点击一下看看什么情况</li><li>自己注册一个账号，但是太麻烦了</li><li>尝试绕开登录验证，直接下载（很明显我选择第三种）</li></ul><h4 id="5-观察源码"><a href="#5-观察源码" class="headerlink" title="5. 观察源码"></a>5. 观察源码</h4><p>因为一般 超链接 点击了都是直接跳转的，如果没有直接跳转，那就说明禁用了 href 属性，并且重写onclick事件，带着这种前提意识打开 F12 &gt; Elements 观察源码 跳过登录 获取下载地址</p><div class="wyx-code-block"><img src="/static/images/spider_5.jpg" referrerpolicy="no-referrer"></div><h4 id="6-代码实现"><a href="#6-代码实现" class="headerlink" title="6. 代码实现"></a>6. 代码实现</h4><p>1.准备工作</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入所需模块</span></span><br><span class="line"><span class="keyword">import</span> os  <span class="comment"># 文件读写</span></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 发起请求</span></span><br><span class="line"><span class="keyword">import</span> re  <span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment"># 获取网页字符串</span></span><br></pre></td></tr></table></figure><p>2.分页爬取所有文件链接并保存</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLinksList</span><span class="params">(list)</span>:</span></span><br><span class="line">  <span class="comment"># 分页爬取目标网址</span></span><br><span class="line">  <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    <span class="comment"># 审计</span></span><br><span class="line">    url = <span class="string">'https://www.zikao365.com/shiti/downlist_search.shtm?page='</span> + str(page) + <span class="string">'&amp;KeyWord=%C9%F3%BC%C6&amp;monthHidden=%C8%AB%B2%BF&amp;month=&amp;yearHidden=%C8%AB%B2%BF&amp;year='</span> </span><br><span class="line">    <span class="comment"># 税法</span></span><br><span class="line">    <span class="comment"># url = 'https://www.zikao365.com/shiti/downlist_search.shtm?page=' + str(page) + '&amp;KeyWord=%CB%B0%B7%A8&amp;monthHidden=%C8%AB%B2%BF&amp;month=&amp;yearHidden=%C8%AB%B2%BF&amp;year='</span></span><br><span class="line"></span><br><span class="line">    htmlstr = requests.get(url) <span class="comment"># 发起请求</span></span><br><span class="line">    htmlstr.encoding = htmlstr.apparent_encoding <span class="comment"># 设置字符编码</span></span><br><span class="line">    soup = BeautifulSoup(htmlstr.text, <span class="string">'lxml'</span>) <span class="comment"># 获取整个html</span></span><br><span class="line">    data = soup.select(<span class="string">'.main .bot ul li a'</span>) <span class="comment"># 筛选所有 a 标签</span></span><br><span class="line">    <span class="comment"># 存储 txt + href 属性</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> data: </span><br><span class="line">      info = &#123;&#125;</span><br><span class="line">      info[<span class="string">'href'</span>] = key[<span class="string">'href'</span>]</span><br><span class="line">      info[<span class="string">'txt'</span>] = key.text</span><br><span class="line">      list.append(info)</span><br></pre></td></tr></table></figure><p>3.下载pdf试题文件</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(list)</span>:</span></span><br><span class="line">  <span class="comment"># 创建文件夹</span></span><br><span class="line">  os.mkdir(<span class="string">"D:\\注册会计师\\审计"</span>)</span><br><span class="line">  os.chdir(<span class="string">"D:\\注册会计师\\审计"</span>)</span><br><span class="line">  <span class="comment"># 下载</span></span><br><span class="line">  <span class="keyword">for</span> val <span class="keyword">in</span> list:</span><br><span class="line">    st_link = val[<span class="string">'href'</span>]</span><br><span class="line">    <span class="comment"># 打开下载网址</span></span><br><span class="line">    res = requests.get(st_link)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">      req = BeautifulSoup(res.text, <span class="string">'lxml'</span>)</span><br><span class="line">      <span class="comment"># 获取js代码字符串 ------ 跳过登录逻辑</span></span><br><span class="line">      script = req.find(<span class="string">'script'</span>, language=<span class="string">"javascript"</span>).string</span><br><span class="line">      <span class="comment"># 匹配到 下载地址</span></span><br><span class="line">      urls = re.findall(<span class="string">'http.*?\.pdf'</span>, str(script))[<span class="number">0</span>]</span><br><span class="line">      <span class="comment"># 下载pdf文件</span></span><br><span class="line">      pdf = requests.get(urls)</span><br><span class="line">      <span class="keyword">if</span> pdf.status_code == <span class="number">200</span>:</span><br><span class="line">        open(val[<span class="string">'txt'</span>] + <span class="string">'.pdf'</span>, <span class="string">'wb'</span>).write(pdf.content)  <span class="comment"># 写入文件</span></span><br><span class="line">        print(val[<span class="string">'txt'</span>] + <span class="string">'.pdf 下载完毕...'</span>)</span><br></pre></td></tr></table></figure><p>4.完整代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">	list = []</span><br><span class="line">	getLinksList(list)</span><br><span class="line">	download(list)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLinksList</span><span class="params">(list)</span>:</span></span><br><span class="line">	<span class="comment"># 分页爬取目标网址</span></span><br><span class="line">	<span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">		<span class="comment"># 审计</span></span><br><span class="line">		url = <span class="string">'https://www.zikao365.com/shiti/downlist_search.shtm?page='</span> + str(page) + <span class="string">'&amp;KeyWord=%C9%F3%BC%C6&amp;monthHidden=%C8%AB%B2%BF&amp;month=&amp;yearHidden=%C8%AB%B2%BF&amp;year='</span> </span><br><span class="line">		<span class="comment"># 税法</span></span><br><span class="line">		<span class="comment"># url = 'https://www.zikao365.com/shiti/downlist_search.shtm?page=' + str(page) + '&amp;KeyWord=%CB%B0%B7%A8&amp;monthHidden=%C8%AB%B2%BF&amp;month=&amp;yearHidden=%C8%AB%B2%BF&amp;year='</span></span><br><span class="line"></span><br><span class="line">		htmlstr = requests.get(url) <span class="comment"># 发起请求</span></span><br><span class="line">		htmlstr.encoding = htmlstr.apparent_encoding <span class="comment"># 设置字符编码</span></span><br><span class="line">		soup = BeautifulSoup(htmlstr.text, <span class="string">'lxml'</span>) <span class="comment"># 获取整个html</span></span><br><span class="line">		data = soup.select(<span class="string">'.main .bot ul li a'</span>) <span class="comment"># 筛选所有 a 标签</span></span><br><span class="line">		<span class="comment"># 存储 txt + href 属性</span></span><br><span class="line">		<span class="keyword">for</span> key <span class="keyword">in</span> data: </span><br><span class="line">			info = &#123;&#125;</span><br><span class="line">			info[<span class="string">'href'</span>] = key[<span class="string">'href'</span>]</span><br><span class="line">			info[<span class="string">'txt'</span>] = key.text</span><br><span class="line">			list.append(info)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(list)</span>:</span></span><br><span class="line">	<span class="comment"># 创建文件夹</span></span><br><span class="line">	<span class="comment"># os.mkdir("D:\\注册会计师\\审计")</span></span><br><span class="line">	os.chdir(<span class="string">"D:\\注册会计师\\审计"</span>)</span><br><span class="line">	<span class="comment"># 下载</span></span><br><span class="line">	<span class="keyword">for</span> val <span class="keyword">in</span> list:</span><br><span class="line">		st_link = val[<span class="string">'href'</span>]</span><br><span class="line">		<span class="comment"># 打开下载网址</span></span><br><span class="line">		res = requests.get(st_link)</span><br><span class="line">		<span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">			req = BeautifulSoup(res.text, <span class="string">'lxml'</span>)</span><br><span class="line">			<span class="comment"># 获取js代码字符串 ------ 跳过登录逻辑</span></span><br><span class="line">			script = req.find(<span class="string">'script'</span>, language=<span class="string">"javascript"</span>).string</span><br><span class="line">			<span class="comment"># 匹配到 下载地址</span></span><br><span class="line">			urls = re.findall(<span class="string">'http.*?\.pdf'</span>, str(script))[<span class="number">0</span>]</span><br><span class="line">			<span class="comment"># 下载pdf文件</span></span><br><span class="line">			pdf = requests.get(urls)</span><br><span class="line">			<span class="keyword">if</span> pdf.status_code == <span class="number">200</span>:</span><br><span class="line">				open(val[<span class="string">'txt'</span>] + <span class="string">'.pdf'</span>, <span class="string">'wb'</span>).write(pdf.content)  <span class="comment"># 写入文件</span></span><br><span class="line">				print(val[<span class="string">'txt'</span>] + <span class="string">'.pdf 下载完毕...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	main()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2020/08/25/python/1.python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><h2 id="转载雪狐96博客"><a href="#转载雪狐96博客" class="headerlink" title="转载雪狐96博客"></a>转载雪狐96博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ friendLinks = [雪狐96博客链接](https://www.xuehu96.com/)</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.xuehu96.com/" target="_blank" rel="noopener">查看雪狐96博客</a></li><li><a href="https://www.xuehu96.com/" target="_blank" rel="noopener">https://www.xuehu96.com/</a></li></ul><h2 id="python2中文"><a href="#python2中文" class="headerlink" title="python2中文"></a>python2中文</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br></pre></td></tr></table></figure><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>使用type返回实例所属的类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;type(<span class="number">123</span>)</span><br><span class="line">int</span><br><span class="line">&gt;&gt;&gt;type(<span class="number">1.2</span>)</span><br><span class="line">float</span><br><span class="line">&gt;&gt;&gt;type(“hello”)</span><br><span class="line">str</span><br></pre></td></tr></table></figure><p>每个对象都有唯一的id<br>使用id()查看<br>判断实例是否属于特定类型<br><code>&gt;&gt;&gt;isinstance(1,int) # Ture</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(int)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>赋值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x += <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">102</span></span><br></pre></td></tr></table></figure><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p><code>&#39;False&#39;, &#39;None&#39;, &#39;True&#39;, &#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;nonlocal&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;</code></p><h3 id="表示假的东西"><a href="#表示假的东西" class="headerlink" title="表示假的东西"></a>表示假的东西</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">""</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">[]</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">"胖猫"</span>     <span class="comment"># 字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (counter)</span><br><span class="line"><span class="keyword">print</span> (miles)</span><br><span class="line"><span class="keyword">print</span> (name)</span><br></pre></td></tr></table></figure><p>多变量赋值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = b = c = <span class="number">1</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"helloworld"</span></span><br></pre></td></tr></table></figure><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><p>进制</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0b110011</span> <span class="comment"># bin 51</span></span><br><span class="line"><span class="number">0o12</span>  <span class="comment">#oct 10</span></span><br><span class="line"><span class="number">0x64</span>  <span class="comment">#hex 100</span></span><br><span class="line"></span><br><span class="line">bin(<span class="number">100</span>) <span class="comment">#'0b1100100'</span></span><br><span class="line"><span class="comment">#同理 oct(100) hex(100) int()还原</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以指定</span></span><br><span class="line">int(<span class="string">"0b1100100"</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">4</span>/<span class="number">2</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>//<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.0</span>//<span class="number">2.0</span></span><br><span class="line"><span class="number">0.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-5</span>/<span class="number">2</span></span><br><span class="line"><span class="number">-2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-5</span>//<span class="number">2</span></span><br><span class="line"><span class="number">-3</span></span><br></pre></td></tr></table></figure><p>深拷贝浅拷贝</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">x2 = copy.copy(x) <span class="comment">#浅</span></span><br><span class="line"></span><br><span class="line">x3 = copy.deepcopy(x) <span class="comment">#深</span></span><br></pre></td></tr></table></figure><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">3</span></span><br><span class="line"><span class="number">0.3333333333333333</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="number">100</span>)</span><br><span class="line"><span class="number">100.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">"-100.123"</span>)</span><br><span class="line"><span class="number">-100.123</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">2.6</span>),int(<span class="number">-2.6</span>)<span class="comment"># 截掉小数部分</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">-2</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#使用math库对浮点数进行处理、</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> math <span class="keyword">import</span> trunc,floor,ceil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>trunc(<span class="number">2.6</span>), trunc(<span class="number">-2.6</span>)<span class="comment">#截掉小数部分</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">-2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floor(<span class="number">2.6</span>),floor(<span class="number">-2.6</span>)<span class="comment">#往数字小的方向取整数</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">-3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ceil(<span class="number">2.6</span>),ceil(<span class="number">-2.6</span>)<span class="comment">#往数字大的方向取整数</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">-2</span>)</span><br></pre></td></tr></table></figure><h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.5</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">1.5</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment">#python对四舍五入操作存在不确定性 不同版本存在差异</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>round(<span class="number">0.500001</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = x[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x[开始：结束：步长]  </span><br><span class="line">x[:5]省略开始</span><br><span class="line">x[2:]省略结束</span><br><span class="line">x[:]完整复制</span><br></pre></td></tr></table></figure><ul><li>索引0表示正向第一个元素 -1表示反向第一个元素<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x[::-1]反向步进 全部复制</span><br><span class="line">x[5:2:-1] &#x2F;&#x2F;5 4 3 反向</span><br><span class="line">x[-2:-5:-1]&#x2F;&#x2F; 负索引 5 4 3</span><br><span class="line">x[-5:-2] &#x2F;&#x2F;2 3 4</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> x[<span class="number">3</span>:<span class="number">7</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">2</span>:<span class="number">5</span>] =[<span class="number">100</span>,<span class="number">200</span>] <span class="comment">#相当于先删除 再插入</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><blockquote><p>与其他语言if语句无太大差别,注意缩进就行了</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure><h4 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h4><p>[输出表达式 + 数据迭代源 + 过滤表达式（可选）]<br><code>[x+10 for x in range(10) if x%2==0]</code><br>[10, 12, 14, 16, 18]</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 判断条件：</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><p>while例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"> </span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    sum = sum + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">print(<span class="string">"1 到 %d 之和为: %d"</span> % (n,sum))</span><br></pre></td></tr></table></figure><p>while。。。else。。。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" 小于 5"</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" 大于或等于 5"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>break语句会导致else语句不被执行，有break但是未被执行也算else</p></blockquote><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &lt;  &#x3D; !&#x3D;</span><br><span class="line">and or not</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串存储Unicode文本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"汉字"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)  <span class="comment">#python的len是真实个数</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(ord(<span class="string">"汉"</span>))</span><br><span class="line"><span class="string">'0x6c49'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">0x6c49</span>)</span><br><span class="line"><span class="string">'汉'</span></span><br></pre></td></tr></table></figure><h3 id="输入-input"><a href="#输入-input" class="headerlink" title="输入(input)"></a>输入(input)</h3><blockquote><p>在 Python3.x 中 raw_input() 和 input() 进行了整合，去除了 raw_input( )，仅保留了input( )函数，其接收任意任性输入，将所有输入默认为字符串处理，并返回字符串类型。</p></blockquote><p>Python3.x 中 input() 函数接受一个标准输入数据，返回为 string 类型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = input()</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"><span class="comment">#如果需要整数123 则需要转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = int(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .find()</span></span><br><span class="line"><span class="comment"># 查找到返回下标，查不到返回-1 ，rfind 从后面找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .index()</span></span><br><span class="line"><span class="comment"># 查找不到程序错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .count()</span></span><br><span class="line"><span class="comment"># 查找次数</span></span><br><span class="line"></span><br><span class="line">str.replace(str1,str2, start=<span class="number">0</span>,end=len(mystr))</span><br><span class="line"><span class="comment">#遇到一个替换一个， 并不更改原串</span></span><br><span class="line"><span class="comment">#第三个参数 替换次数</span></span><br><span class="line"></span><br><span class="line">str.split(<span class="string">" "</span>)</span><br><span class="line"><span class="comment"># 字符串切割  变成列表</span></span><br><span class="line"><span class="comment"># split() 没有参数 默认按空格\t切</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .startswith()</span></span><br><span class="line"><span class="comment"># .endswith()</span></span><br><span class="line"><span class="comment"># 返回True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .lower()</span></span><br><span class="line"><span class="comment"># .upper()</span></span><br><span class="line"><span class="comment"># 大写转为小写 小写转为大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .center(50) 居中</span></span><br><span class="line"><span class="comment"># ljust 靠左 rjust 靠右</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lstrip 左边空格删掉</span></span><br><span class="line"><span class="comment"># rstrip 右边的空格删掉</span></span><br><span class="line"><span class="comment"># strip 前后的空格都删掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .parttion("aa")</span></span><br><span class="line"><span class="comment"># 用aa字符串把整个字符串分成三个元组</span></span><br><span class="line"><span class="comment"># rparttion 从右边开始找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># splitlines</span></span><br><span class="line"><span class="comment"># 按行切割 删除空行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isalpha </span></span><br><span class="line"><span class="comment"># isdigit</span></span><br><span class="line"><span class="comment"># isalnum() 既有数字又有字母</span></span><br><span class="line"></span><br><span class="line">a = [<span class="string">"aaa"</span>,<span class="string">"bbb"</span>,<span class="string">"ccc"</span>]</span><br><span class="line">b = <span class="string">"="</span></span><br><span class="line">b.join(a)</span><br><span class="line"><span class="comment"># "aaa=bbb=ccc"</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">第三注释</span></span><br><span class="line"><span class="string">第四注释</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五注释</span></span><br><span class="line"><span class="string">第六注释</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h3><p>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 列表的定义</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span> ,<span class="string">"老王"</span> ]; <span class="comment">#可以同时存储多种数据类型</span></span><br><span class="line">list = [] <span class="comment"># 就是列表</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"list[0]: "</span>, list[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"list[1:5]: "</span>, list[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">list.append()</span><br><span class="line">list.insert(位置,添加的内容)</span><br><span class="line"><span class="comment"># list1+list2</span></span><br><span class="line">list.extend(另一个列表) <span class="comment"># 合并</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## append和extend</span></span><br><span class="line"><span class="comment">#  extend只能放可以迭代的，一个一个加进去</span></span><br><span class="line"><span class="comment">#  append是把括号里当成一个整体 添加一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">list.pop() <span class="comment"># 删除最后一个</span></span><br><span class="line">list.remove(<span class="string">"老王"</span>)  <span class="comment"># 按内容删，从左边删1个</span></span><br><span class="line"><span class="keyword">del</span> list[<span class="number">2</span>] <span class="comment"># 根据下标删  删除第三个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">list[下标] = 新值</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line"><span class="comment"># in  /  not in</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"老赵"</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"找到了"</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Python 表达式</th><th align="center">结果</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len([1, 2, 3])</td><td align="center">3</td><td align="center">长度</td></tr><tr><td align="center">[1, 2, 3] + [4, 5, 6]</td><td align="center">[1, 2, 3, 4, 5, 6]</td><td align="center">组合</td></tr><tr><td align="center">[‘Hi!’] * 4</td><td align="center">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="center">重复</td></tr><tr><td align="center">3 in [1, 2, 3]</td><td align="center">True</td><td align="center">元素是否存在于列表中</td></tr><tr><td align="center">for x in [1, 2, 3]: print(x, end=” “)</td><td align="center">1 2 3</td><td align="center">迭代</td></tr></tbody></table><h3 id="字典-（dictionary）"><a href="#字典-（dictionary）" class="headerlink" title="字典 （dictionary）"></a>字典 （dictionary）</h3><p>须是唯一的，但值则不必<br>可变类型不能当key（列表和字典）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">infor = &#123;键:值,键:值&#125;</span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Name']: "</span>, dict[<span class="string">'Name'</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"dict['Age']: "</span>, dict[<span class="string">'Age'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">dict[<span class="string">'Age'</span>] = <span class="number">8</span>;               <span class="comment"># 更新 Age（key存在）</span></span><br><span class="line">dict[<span class="string">'tangyuan'</span>] = <span class="string">"汤圆"</span>      <span class="comment"># 添加信息(写一个新的key)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查</span></span><br><span class="line">dict[<span class="string">'tangyuan'</span>]  <span class="comment">#查找  key不存在报错</span></span><br><span class="line">dict.get(<span class="string">"tangyuan"</span>)  <span class="comment"># key不存在不报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>] <span class="comment"># 删除键 'Name'</span></span><br><span class="line">dict.clear()     <span class="comment"># 清空字典</span></span><br><span class="line"><span class="keyword">del</span> dict         <span class="comment"># 删除字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的键</span></span><br><span class="line">infor.keys() <span class="comment"># python2是列表 python3是对象</span></span><br><span class="line">infor.values()</span><br><span class="line">infor.items() <span class="comment"># 列表 [两个元组]  每次循环都有key和value</span></span><br></pre></td></tr></table></figure><h2 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h2><blockquote><p>注：元组只能读 <strong>不能修改</strong></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">'Google'</span>, <span class="string">'汤圆'</span>, <span class="number">1997</span>, <span class="number">2000</span>)<span class="comment">#定义元组</span></span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> )</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup1[0]: "</span>, tup1[<span class="number">0</span>])<span class="comment">#访问元组</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"tup2[1:5]: "</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">a = (<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line">b,c = a <span class="comment"># b = 11   c = 22  (拆包)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tup1 = ();<span class="comment">#创建空元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tup1)     <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Python 表达式</th><th align="center">结果</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">len((1, 2, 3))</td><td align="center">3</td><td align="center">计算元素个数</td></tr><tr><td align="center">(1, 2, 3) + (4, 5, 6)</td><td align="center">(1, 2, 3, 4, 5, 6)</td><td align="center">连接</td></tr><tr><td align="center">(‘Hi!’,) * 4</td><td align="center">(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td align="center">复制</td></tr><tr><td align="center">3 in (1, 2, 3)</td><td align="center">True</td><td align="center">元素是否存在</td></tr><tr><td align="center">for x in (1, 2, 3): print (x,)</td><td align="center">1 2 3</td><td align="center">迭代</td></tr></tbody></table><h2 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h2><blockquote><p>存储非重复元素 ,<br>集合（set）是一个无序的不重复元素序列。</p></blockquote><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。<br>创建格式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;basket = &#123;<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(basket)                      <span class="comment"># 这里演示的是去重功能</span></span><br><span class="line">&#123;<span class="string">'orange'</span>, <span class="string">'banana'</span>, <span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'orange'</span> <span class="keyword">in</span> basket                 <span class="comment"># 快速判断元素是否在集合内</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'crabgrass'</span> <span class="keyword">in</span> basket</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 下面展示两个集合间的运算.</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  </span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 集合a中包含而集合b中不包含的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 集合a或b中包含的所有元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># 集合a和b中都包含了的元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 不同时包含于a和b的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for &lt;variable&gt; in &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">languages = [<span class="string">"C"</span>, <span class="string">"C++"</span>, <span class="string">"Perl"</span>, <span class="string">"Python"</span>] </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> languages:</span><br><span class="line">    <span class="keyword">print</span> (x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#range</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br></pre></td></tr></table></figure><h3 id="for循环的else"><a href="#for循环的else" class="headerlink" title="for循环的else"></a>for循环的else</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tmp <span class="keyword">in</span> nums:</span><br><span class="line">    print(tmp)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"==="</span>) <span class="comment"># 循环正常结束打印一次（一定会执行）</span></span><br><span class="line">    <span class="comment">#在for循环里break  不会进入else</span></span><br></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数创建</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(x, y=<span class="number">10</span>)</span>:</span></span><br><span class="line">    x+=<span class="number">100</span></span><br><span class="line">    print(x,y)</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#输出101 2</span></span><br><span class="line">test(<span class="number">20</span>) <span class="comment">#输出 120 10</span></span><br></pre></td></tr></table></figure><h2 id="匿名"><a href="#匿名" class="headerlink" title="匿名"></a>匿名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> x,y : x + y</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">#3</span></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,c=<span class="number">33</span>,d=<span class="number">44</span>,*args)</span>:</span><span class="comment">#*args是位置参数收集</span></span><br><span class="line">    print(locals())</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">#输出结果 &#123;'a': 1, 'b': 2, 'c': 3, 'd': 4, 'args': (5, 6, 7, 8)&#125;</span></span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">#返回多个数</span></span><br><span class="line">    <span class="keyword">elif</span> n&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>,<span class="number">-2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(test(<span class="number">1</span>))  <span class="comment">#(1, 2, 3)</span></span><br><span class="line">print(test(<span class="number">-1</span>))  <span class="comment">#(-1, -2)</span></span><br><span class="line">print(test(<span class="number">0</span>))  <span class="comment">#0</span></span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>放在函数调用之前</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">wendu = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> wendu  <span class="comment"># 声明修改全局变量</span></span><br><span class="line">    wendu = <span class="number">33</span></span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对列表里的字典排序</span></span><br><span class="line">infor.sort(key=<span class="keyword">lambda</span> x:x[<span class="string">'name'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,func)</span>:</span></span><br><span class="line">    result = func(a,b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">num = test(<span class="number">11</span>,<span class="number">22</span>,<span class="keyword">lambda</span> x,y:x+y)</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure><h2><a href="#" class="headerlink" title="+="></a>+=</h2><blockquote><p>python都是引用</p></blockquote><p>如果是可变类型 直接修改，如果是不可变 ，指向一个新的<br>num += num #直接修改num的值<br>num = num + num #先得到一个临时的值，再重新指向</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><blockquote><p>大象怎么关进冰箱</p></blockquote><h3 id="读写文本文件"><a href="#读写文本文件" class="headerlink" title="读写文本文件"></a>读写文本文件</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fileRW.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个列表中的字符串写入文件</span></span><br><span class="line">f = open(<span class="string">'test1.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'aaa'</span>,<span class="number">123</span>,<span class="string">'汤圆'</span>,<span class="literal">True</span>,<span class="string">'tangyuan'</span>]:</span><br><span class="line">    <span class="keyword">if</span> type(x) == str:</span><br><span class="line">        f.write(x)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#一次性读出到字符串</span></span><br><span class="line">f = open(<span class="string">'test1.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">xx = f.read()</span><br><span class="line">print(<span class="string">'xx='</span>,xx)</span><br><span class="line">f.close() </span><br><span class="line"></span><br><span class="line">f.read(<span class="number">1</span>) <span class="comment">#读取一个字节</span></span><br><span class="line"></span><br><span class="line">f.readline()  <span class="comment"># 返回值是字符串</span></span><br><span class="line">f.readlines() <span class="comment"># 返回值是列表  每一行是一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果：xx= aaa汤圆tangyuan</span></span><br></pre></td></tr></table></figure><h3 id="打开模式"><a href="#打开模式" class="headerlink" title="打开模式"></a>打开模式</h3><table><thead><tr><th align="center">模式</th><th align="center">r</th><th align="center">r+</th><th align="center">w</th><th align="center">w+</th><th align="center">a</th><th align="center">a+</th></tr></thead><tbody><tr><td align="center">读</td><td align="center">+</td><td align="center">+</td><td align="center"></td><td align="center">+</td><td align="center"></td><td align="center">+</td></tr><tr><td align="center">写</td><td align="center"></td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center">+</td></tr><tr><td align="center">创建</td><td align="center"></td><td align="center"></td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center">+</td></tr><tr><td align="center">覆盖</td><td align="center"></td><td align="center"></td><td align="center">+</td><td align="center">+</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">指针在开始</td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">指针在结尾</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">+</td><td align="center">+</td></tr></tbody></table><hr><table><thead><tr><th align="center">模式</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">w</td><td align="center">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td align="center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">rb</td><td align="center">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">wb</td><td align="center">以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">ab</td><td align="center">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">r+</td><td align="center">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">w+</td><td align="center">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a+</td><td align="center">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center">rb+</td><td align="center">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">wb+</td><td align="center">以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">ab+</td><td align="center">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h3 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h3><blockquote><p>.seek(2,0) # 从开头 向后偏移2个字节</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f.seek(<span class="number">0</span>,<span class="number">0</span>) <span class="comment"># 回到开头</span></span><br><span class="line">f.tell()<span class="comment"># 当前位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个参数</span></span><br><span class="line">微调 <span class="comment">#python3不支持负数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个参数</span></span><br><span class="line"><span class="number">0</span> 文件开头</span><br><span class="line"><span class="number">1</span> 当前位置</span><br><span class="line"><span class="number">3</span> 文件末尾</span><br></pre></td></tr></table></figure><h2 id="文件重命名-删除"><a href="#文件重命名-删除" class="headerlink" title="文件重命名 删除"></a>文件重命名 删除</h2><p>os.rename<br>os.remove<br>os.mkdir<br>os.chdir #改变默认路径<br>os.getcwd<br>os.listdir(“./“) # 当前路径下所有文件</p><hr><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#手工迭代</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = d.__iter__()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.__next__()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.__next__()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.__next__()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.__next__()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"></span><br><span class="line"><span class="comment">#自动迭代</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]:</span><br><span class="line">    print(i)<span class="comment">#输出 0 1 2</span></span><br></pre></td></tr></table></figure><hr><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><blockquote><p>图纸（类） 飞机（对象）</p></blockquote><ul><li>类的名称：类名</li><li>类的属性：一组数据</li><li>类的方法：允许操作的方法（行为）<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x)</span>:</span> <span class="comment"># 定义方法必须写上self</span></span><br><span class="line">        self.__x = x;  <span class="comment">#self相当于其他语言的this</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span> <span class="comment"># 可以直接print</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"__x=%d"</span> % __x</span><br><span class="line"></span><br><span class="line">    <span class="comment">#私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__send_msg</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_x</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__x</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    b = <span class="string">"hello"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x,y)</span>:</span></span><br><span class="line">        super().__init__(x)</span><br><span class="line">        self.y=y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_y</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.y</span><br><span class="line"></span><br><span class="line">o = B(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(o.get_x(),o.get_y())<span class="comment">## 1 2</span></span><br></pre></td></tr></table></figure><blockquote><p>私有字段(Attribute)用双下划线开头__name<br>保护字段 protected _name 只循序本身和子类访问</p></blockquote></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>     :</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>  :</span><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>  :</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">issubclass(A,object) <span class="comment">#true</span></span><br><span class="line">type(A) <span class="keyword">is</span> A.__class__ <span class="comment">#true</span></span><br><span class="line"></span><br><span class="line">B.__base__ <span class="comment">#A</span></span><br><span class="line">A.__subclasses__() <span class="comment">#[B]</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>__init__是可选的</code></p><h3 id="覆盖-override"><a href="#覆盖-override" class="headerlink" title="覆盖(override)"></a>覆盖(override)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(self)</span>:</span>print(<span class="string">"A.m"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">(self)</span>:</span>self.m()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(self)</span>:</span>print(<span class="string">"B.m"</span>)</span><br><span class="line"></span><br><span class="line">A().do()  <span class="comment">#输出 A.m</span></span><br><span class="line">B().do()  <span class="comment">#输出 B.m</span></span><br></pre></td></tr></table></figure><h3 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h3><ul><li><strong>init</strong> : 构造函数，在生成对象时调用</li><li><strong>del</strong> : 析构函数，释放对象时使用</li><li><strong>str</strong>: 转文本 str(obj)</li><li><strong>repr</strong> : 打印，转换</li><li><strong>setitem</strong> : 按照索引赋值</li><li><strong>getitem</strong>: 按照索引获取值</li><li><strong>len</strong>: 获得长度</li><li><strong>cmp</strong>: 比较运算</li><li><strong>call</strong>: 函数调用</li><li><strong>add</strong>: 加运算</li><li><strong>sub</strong>: 减运算</li><li><strong>mul</strong>: 乘运算</li><li><strong>truediv</strong>: 除运算</li><li><strong>mod</strong>: 求余运算</li><li><strong>pow</strong>: 乘方</li></ul><h2 id="实例方法、类方法、静态方法"><a href="#实例方法、类方法、静态方法" class="headerlink" title="实例方法、类方法、静态方法"></a>实例方法、类方法、静态方法</h2><blockquote><p>操作类 用类方法<br>操作实例 用实例方法<br>做一些和类数据没有关系的操作 用静态方法</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment">#类属性</span></span><br><span class="line">    num = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">#实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#实例属性</span></span><br><span class="line">        self.name = <span class="string">"laowang"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(cls)</span>:</span> <span class="comment"># cls保存类的引用</span></span><br><span class="line">        cls.num=<span class="number">100</span> <span class="comment">#类方法为了修改类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_menu</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"-------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用类方法</span></span><br><span class="line">Game.add_num() <span class="comment">#可以通过类名调用</span></span><br><span class="line">game = Game()</span><br><span class="line">game.add_num() <span class="comment">#也可以通过对象调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用静态方法</span></span><br><span class="line">Game.print_menu() <span class="comment">#ok</span></span><br><span class="line">game.print_menu() <span class="comment">#ok</span></span><br></pre></td></tr></table></figure><h2 id="new方法"><a href="#new方法" class="headerlink" title="new方法"></a>new方法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> object.__new__(cls) <span class="comment"># 返回值是对象的一个引用</span></span><br><span class="line"></span><br><span class="line">dog = Dog()     <span class="comment"># 1.调用__new__ 只负责创建对象</span></span><br><span class="line">                <span class="comment"># 2.调用__init__ 只符合初始化</span></span><br><span class="line">                <span class="comment"># 3.返回对象的引用</span></span><br></pre></td></tr></table></figure><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance == <span class="literal">None</span>:</span><br><span class="line">            __instance = object.__new(cls)</span><br><span class="line">            <span class="keyword">return</span> __instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> __instance</span><br><span class="line"></span><br><span class="line">a = Dog()</span><br><span class="line">print(id(a))</span><br><span class="line">b = Dog()</span><br><span class="line">print(id(b))</span><br></pre></td></tr></table></figure><h2 id="一次初始化"><a href="#一次初始化" class="headerlink" title="一次初始化"></a>一次初始化</h2><h2 id="单例-1"><a href="#单例-1" class="headerlink" title="单例"></a>单例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    __init_flag = <span class="literal">False</span> <span class="comment">#添加一个标志位</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance == <span class="literal">None</span>:</span><br><span class="line">            __instance = object.__new(cls)</span><br><span class="line">            <span class="keyword">return</span> __instance</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> __instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> Dog.__init_flag==<span class="literal">False</span>:</span><br><span class="line">            self.name=name</span><br><span class="line">            Dog.__init_flag = <span class="literal">True</span> <span class="comment">#只初始化一次</span></span><br><span class="line"></span><br><span class="line">a = Dog(<span class="string">"旺财"</span>)</span><br><span class="line">print(id(a))</span><br><span class="line">b = Dog(<span class="string">"哮天犬"</span>) <span class="comment"># 虽然是单例，但是会init两次</span></span><br><span class="line">print(id(b))</span><br></pre></td></tr></table></figure><hr><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"err"</span>)</span><br><span class="line">    <span class="keyword">except</span>: <span class="comment">#python2的捕获所有异常，python3加个Exception</span></span><br><span class="line">        print(sys.exc_info())</span><br><span class="line">        <span class="keyword">raise</span> <span class="comment"># 重新抛出异常，触发默认异常处理</span></span><br><span class="line">        </span><br><span class="line">test()</span><br><span class="line"><span class="comment">#(&lt;class 'Exception'&gt;, Exception('err'), &lt;traceback object at 0x0000026EB3FB70C8&gt;)</span></span><br></pre></td></tr></table></figure><p>异常处理</p><ul><li>try 需要保护的代码块</li><li>except 异常发生时 按所属类型捕获</li><li>else 未发生异常执行 前面需要至少有1个except</li><li>finally 无论是否发生异常 总是执行<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">"try"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">raise</span> Exception()</span><br><span class="line">    <span class="keyword">except</span> (NameError,FileNotFoundError): </span><br><span class="line">        print(<span class="string">"#python3捕获多个异常 加括号 是元组"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"所有异常的总称"</span>)</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"没有异常才会执行"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">"不管是否产生异常 总会执行"</span>)</span><br><span class="line">        <span class="comment"># 关文件</span></span><br><span class="line"></span><br><span class="line">test(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#try</span></span><br><span class="line"><span class="comment">#except</span></span><br><span class="line"><span class="comment">#finally</span></span><br><span class="line">test(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#try</span></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"><span class="comment">#finally</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><blockquote><p>pip 管理python模块的工具</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys  <span class="comment">#引入所有函数</span></span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> * <span class="comment">#引入模块中所有函数</span></span><br><span class="line"><span class="keyword">from</span> xxx <span class="keyword">import</span> xxx,xxx  <span class="comment">#引入xxx函数 没列入的不引入</span></span><br><span class="line"><span class="keyword">import</span> xxx <span class="keyword">as</span> xxx <span class="comment">#重命名 </span></span><br><span class="line">``` </span><br><span class="line">&gt;使用<span class="keyword">from</span> example.module01 <span class="keyword">import</span> * 调用函数不需要加包名  如`myfun1(<span class="number">10</span>,<span class="number">20</span>)`</span><br><span class="line">使用<span class="keyword">from</span> example <span class="keyword">import</span> module01 调用函数需要加模块名和函数名，不需要加包名 如`module01.myfun1(<span class="number">10</span>,<span class="number">20</span>)`</span><br><span class="line"></span><br><span class="line"><span class="comment">## 包</span></span><br><span class="line">创建一个__init__.py的空文件，这个文件夹就是包  </span><br><span class="line">导入包 这个文件就会执行</span><br><span class="line">```python</span><br><span class="line">__all__ = [<span class="string">"send_msg"</span>] <span class="comment"># 影响from</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print("hahaha") #导入包会执行的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#import sendmsg # 导入包 python2用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> sendmsg</span><br></pre></td></tr></table></figure><h2 id="制作模块"><a href="#制作模块" class="headerlink" title="制作模块"></a>制作模块</h2><blockquote><p>在包文件夹相同路径旁边 新建一个setup.py</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">"test"</span>, version=<span class="string">"1.0"</span>, description=<span class="string">"xuehu96's module"</span>, author=<span class="string">"xuehu96"</span>, py_modules=[<span class="string">'TestMsg.sendmsg'</span>, <span class="string">'TestMsg.recvmsg'</span>])</span><br></pre></td></tr></table></figure><p>运行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译</span></span><br><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py sdisk</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">tar -zxvf 压缩包</span><br><span class="line">python3 setup.py install <span class="comment">#安装到系统里</span></span><br></pre></td></tr></table></figure><h2 id="给程序传参数"><a href="#给程序传参数" class="headerlink" title="给程序传参数"></a>给程序传参数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"欢迎%s的到来"</span>% sys.argv[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><blockquote><p>创建一个很大的列表</p></blockquote><p>python2 range有风险<br>python3 什么时候要什么时候生成</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">18</span>)] <span class="comment">#1-17</span></span><br><span class="line">b = [ <span class="number">1111</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="comment">#10个1111</span></span><br><span class="line">c = [ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> <span class="number">1</span>%<span class="number">2</span>==<span class="number">0</span>] <span class="comment">#for和if</span></span><br><span class="line">d = [ i <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>)] <span class="comment">#6次 [0,0,1,1,2,2,]</span></span><br><span class="line">e = [(i,j,k) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>) <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">3</span>) ] <span class="comment"># [(000)(001)(002)(010)....(212)]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VueRouter 模块化拆分</title>
    <url>/2020/06/20/vue/VueRouter/</url>
    <content><![CDATA[<h2 id="vue-模块化-路由拆分配置"><a href="#vue-模块化-路由拆分配置" class="headerlink" title="vue 模块化 路由拆分配置"></a>vue 模块化 路由拆分配置</h2><h3 id="一、普通路由配置"><a href="#一、普通路由配置" class="headerlink" title="一、普通路由配置"></a>一、普通路由配置</h3><ul><li>通常我们编写vue路由配置都会写在 /src/router/index.js 这个文件下。</li><li>但是，随着我们的vue项目变得越来越大后，路由也随之变得越来越多，出现的问题就是我们所有的路由都定义在一个文件下，代码会变得可读性差，难以维护。 如下图所示。</li></ul><div class="wyx-code-block"><img src="/static/images/vueRouter_1.png" referrerpolicy="no-referrer"></div><h3 id="二、通过拆分vue路由配置文件形成多个路由模块"><a href="#二、通过拆分vue路由配置文件形成多个路由模块" class="headerlink" title="二、通过拆分vue路由配置文件形成多个路由模块"></a>二、通过拆分vue路由配置文件形成多个路由模块</h3><ul><li>比如说我们可以在 /src/router/ 目录下面新建一个 common.js和message.js文件</li><li>common.js 文件里面我们这么写，把公用的路由配置写在里面</li></ul><div class="wyx-code-block"><img src="/static/images/vueRouter_2.png" referrerpolicy="no-referrer"></div><ul><li>然后我们再抽离出一个 message.js 消息模块，把和消息相关的路由配置写在这个模块里</li></ul><div class="wyx-code-block"><img src="/static/images/vueRouter_3.png" referrerpolicy="no-referrer"></div><ul><li>同理，我们通过这种方式就可以把 index.js 路由配置文件，拆成了多个路由模块，这样我们就可以分模块来维护我们的路由配置，可读性也变高了。</li></ul><h3 id="三、将多个路由模块应用到路由配置文件里"><a href="#三、将多个路由模块应用到路由配置文件里" class="headerlink" title="三、将多个路由模块应用到路由配置文件里"></a>三、将多个路由模块应用到路由配置文件里</h3><ul><li>假设我们已经按功能拆分好了多个路由模块，目录结构如下</li></ul><div class="wyx-code-block"><img src="/static/images/vueRouter_4.png" referrerpolicy="no-referrer"></div><ul><li>得到了多个路由模块，最后我们可以利用ES6的扩展运算符，将多个模块整合到配置文件里</li></ul><div class="wyx-code-block"><img src="/static/images/vueRouter_5.png" referrerpolicy="no-referrer"></div><ul><li>这样拆分后就方便以后维护和更新了</li></ul>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>javaScript</tag>
        <tag>vue</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬虫练习</title>
    <url>/2020/06/15/python/python%E7%88%AC%E8%99%AB%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="记录下所写过的爬虫代码"><a href="#记录下所写过的爬虫代码" class="headerlink" title="记录下所写过的爬虫代码"></a>记录下所写过的爬虫代码</h3><p>爬虫类型：</p><ul><li>1.通过接口获取数据</li><li>2.通过bs4插件获取整个网页字符集，在使用选择器获取</li></ul><h4 id="1-百万制造海报"><a href="#1-百万制造海报" class="headerlink" title="1.百万制造海报"></a>1.百万制造海报</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">intro = [</span><br><span class="line">	<span class="string">'人气海报'</span>,</span><br><span class="line">	<span class="string">'励志心语'</span>,</span><br><span class="line">	<span class="string">'营销海报'</span>,</span><br><span class="line">	<span class="string">'彩票知识'</span>,</span><br><span class="line">	<span class="string">'开奖宣传'</span>,</span><br><span class="line">	<span class="string">'热门赛事'</span>,</span><br><span class="line">	<span class="string">'提醒海报'</span>,</span><br><span class="line">	<span class="string">'公益体彩'</span>,</span><br><span class="line">	<span class="string">'即开型'</span>,</span><br><span class="line">	<span class="string">'表情包'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">()</span>:</span></span><br><span class="line">	os.mkdir(<span class="string">"D:\\百万制造\\"</span>)</span><br><span class="line">	<span class="comment"># 文件分类型</span></span><br><span class="line">	<span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">		<span class="comment"># 创建文件夹</span></span><br><span class="line">		os.mkdir(<span class="string">"D:\\百万制造\\"</span> + intro[a])</span><br><span class="line">		<span class="comment"># # 进入创建好的文件夹</span></span><br><span class="line">		os.chdir(<span class="string">"D:\\百万制造\\"</span> + intro[a])</span><br><span class="line">		<span class="comment"># 分页 假设 20 页</span></span><br><span class="line">		<span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">			<span class="comment"># 配置请求参数</span></span><br><span class="line">			data = &#123; <span class="string">'tagid'</span>: a + <span class="number">1</span>,<span class="string">'page'</span>: p , <span class="string">'type'</span>: <span class="number">1</span>&#125;</span><br><span class="line">			<span class="comment"># 发起请求</span></span><br><span class="line">			url = <span class="string">'https://api.baiwanzz.com/byzz/v1.posters/getposters'</span></span><br><span class="line">			res = requests.post(url,data)  </span><br><span class="line">			<span class="comment"># 获取到 data 数据</span></span><br><span class="line">			dataList = json.loads(res.content)[<span class="string">'data'</span>]</span><br><span class="line">			<span class="comment"># 处理数据</span></span><br><span class="line">			<span class="keyword">for</span> i,d <span class="keyword">in</span> enumerate(dataList):</span><br><span class="line">				<span class="comment"># 拼接海报地址</span></span><br><span class="line">				poster_link = <span class="string">'https://bj.baiwanzz.com'</span> + d[<span class="string">'pimg'</span>]</span><br><span class="line">				im = requests.get(poster_link)  <span class="comment"># 请求url</span></span><br><span class="line">				<span class="keyword">if</span> im.status_code == <span class="number">200</span>:</span><br><span class="line">					open(str(a) + str(p) + str(i) + <span class="string">'.png'</span>, <span class="string">'wb'</span>).write(im.content)  <span class="comment"># 写入文件</span></span><br><span class="line">					print(<span class="string">'百万制造'</span> + str(a) + str(p) + str(i) + <span class="string">'.jpg 下载完毕...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloadPic()</span><br></pre></td></tr></table></figure><h4 id="2-图片之家"><a href="#2-图片之家" class="headerlink" title="2.图片之家"></a>2.图片之家</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 爬取目标网址</span></span><br><span class="line">	list = []</span><br><span class="line">	<span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">173</span>):</span><br><span class="line">		url = <span class="string">'https://www.tupianzj.com/meinv/xiezhen/list_179_'</span> + str(page) + <span class="string">'.html'</span></span><br><span class="line">		<span class="comment"># 获取整个网页 html 字符集</span></span><br><span class="line">		htmlstr = requests.get(url)</span><br><span class="line">		htmlstr.encoding = <span class="string">"GBK"</span></span><br><span class="line">		soup = BeautifulSoup(htmlstr.text, <span class="string">'lxml'</span>)</span><br><span class="line">		<span class="comment"># 捕获到图片目标</span></span><br><span class="line">		data = soup.select(<span class="string">'#container .list_con_box ul li a img'</span>)</span><br><span class="line">		<span class="comment"># 存储图片 alt + src</span></span><br><span class="line">		<span class="keyword">for</span> img <span class="keyword">in</span> data:</span><br><span class="line">			info = &#123;&#125;</span><br><span class="line">			info[<span class="string">'src'</span>] = img.get(<span class="string">'src'</span>)</span><br><span class="line">			info[<span class="string">'alt'</span>] = img.get(<span class="string">'alt'</span>)</span><br><span class="line">			list.append(info)</span><br><span class="line">	<span class="comment"># 创建文件夹</span></span><br><span class="line">	os.mkdir(<span class="string">"D:\\清纯美女\\"</span>)</span><br><span class="line">	os.chdir(<span class="string">"D:\\清纯美女\\"</span>)</span><br><span class="line">	<span class="comment"># 下载图片</span></span><br><span class="line">	<span class="keyword">for</span> val <span class="keyword">in</span> list:</span><br><span class="line">		poster_link = val[<span class="string">'src'</span>]</span><br><span class="line">		im = requests.get(poster_link)  <span class="comment"># 请求url</span></span><br><span class="line">		<span class="keyword">if</span> im.status_code == <span class="number">200</span>:</span><br><span class="line">			open(val[<span class="string">'alt'</span>] + <span class="string">'.png'</span>, <span class="string">'wb'</span>).write(im.content)  <span class="comment"># 写入文件</span></span><br><span class="line">			print(val[<span class="string">'alt'</span>] + <span class="string">'.png 下载完毕...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloadPic()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 爬取目标网址</span></span><br><span class="line">	<span class="comment"># 诱人</span></span><br><span class="line">	<span class="comment"># url = 'https://www.tupianzj.com/meinv/mm/yourendemeinv/'</span></span><br><span class="line">	<span class="comment"># 精品</span></span><br><span class="line">	url = <span class="string">'https://www.tupianzj.com/meinv/mm/jpmnxz/'</span></span><br><span class="line">	<span class="comment"># 获取整个网页 html 字符集</span></span><br><span class="line">	htmlstr = requests.get(url)</span><br><span class="line">	htmlstr.encoding = <span class="string">"GBK"</span></span><br><span class="line">	soup = BeautifulSoup(htmlstr.text, <span class="string">'lxml'</span>)</span><br><span class="line">	<span class="comment"># 捕获到图片目标</span></span><br><span class="line">	data = soup.select(<span class="string">'#container .list_con_box .tbox ul li a img'</span>)</span><br><span class="line">	<span class="comment"># 存储图片 alt + src</span></span><br><span class="line">	list = []</span><br><span class="line">	<span class="keyword">for</span> img <span class="keyword">in</span> data:</span><br><span class="line">		info = &#123;&#125;</span><br><span class="line">		info[<span class="string">'src'</span>] = img.get(<span class="string">'src'</span>)</span><br><span class="line">		info[<span class="string">'alt'</span>] = img.get(<span class="string">'alt'</span>)</span><br><span class="line">		list.append(info)</span><br><span class="line">	<span class="comment"># 创建文件夹</span></span><br><span class="line">	<span class="comment"># os.mkdir("D:\\精品美女\\")</span></span><br><span class="line">	os.chdir(<span class="string">"D:\\精品美女\\"</span>)</span><br><span class="line">	<span class="comment"># 下载图片</span></span><br><span class="line">	index = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> val <span class="keyword">in</span> list:</span><br><span class="line">		index += <span class="number">1</span></span><br><span class="line">		poster_link = val[<span class="string">'src'</span>]</span><br><span class="line">		im = requests.get(poster_link)  <span class="comment"># 请求url</span></span><br><span class="line">		<span class="keyword">if</span> im.status_code == <span class="number">200</span>:</span><br><span class="line">			open(str(index) + <span class="string">'.png'</span>, <span class="string">'wb'</span>).write(im.content)  <span class="comment"># 写入文件</span></span><br><span class="line">			print(val[<span class="string">'alt'</span>] + <span class="string">'.png 下载完毕...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloadPic()</span><br></pre></td></tr></table></figure><h4 id="3-回车桌面"><a href="#3-回车桌面" class="headerlink" title="3. 回车桌面"></a>3. 回车桌面</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 爬取目标网址</span></span><br><span class="line">	list = []</span><br><span class="line">	<span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">66</span>):</span><br><span class="line">		url = <span class="string">'https://sj.enterdesk.com/woman/'</span> + str(page) + <span class="string">'.html'</span></span><br><span class="line">		<span class="comment"># 获取整个网页 html 字符集</span></span><br><span class="line">		htmlstr = requests.get(url)</span><br><span class="line">		htmlstr.encoding = <span class="string">"UTF-8"</span></span><br><span class="line">		soup = BeautifulSoup(htmlstr.text, <span class="string">'lxml'</span>)</span><br><span class="line">		<span class="comment"># 捕获到图片目标</span></span><br><span class="line">		data = soup.select(<span class="string">'.main .egeli_pic_li a img'</span>)</span><br><span class="line">		<span class="comment"># 存储图片 alt + src</span></span><br><span class="line">		<span class="keyword">for</span> img <span class="keyword">in</span> data:</span><br><span class="line">			info = &#123;&#125;</span><br><span class="line">			info[<span class="string">'src'</span>] = img.get(<span class="string">'src'</span>)</span><br><span class="line">			info[<span class="string">'alt'</span>] = img.get(<span class="string">'alt'</span>)</span><br><span class="line">			list.append(info)</span><br><span class="line">	<span class="comment"># 创建文件夹</span></span><br><span class="line">	os.mkdir(<span class="string">"D:\\美女图片\\"</span>)</span><br><span class="line">	os.chdir(<span class="string">"D:\\美女图片\\"</span>)</span><br><span class="line">	<span class="comment"># 下载图片</span></span><br><span class="line">	<span class="keyword">for</span> val <span class="keyword">in</span> list:</span><br><span class="line">		poster_link = val[<span class="string">'src'</span>]</span><br><span class="line">		im = requests.get(poster_link.replace(<span class="string">'_360_360'</span>, <span class="string">''</span>))  <span class="comment"># 请求url</span></span><br><span class="line">		<span class="keyword">if</span> im.status_code == <span class="number">200</span>:</span><br><span class="line">			open(val[<span class="string">'alt'</span>] + <span class="string">'.png'</span>, <span class="string">'wb'</span>).write(im.content)  <span class="comment"># 写入文件</span></span><br><span class="line">			print(val[<span class="string">'alt'</span>] + <span class="string">'.png 下载完毕...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloadPic()</span><br></pre></td></tr></table></figure><h4 id="4-百度图片"><a href="#4-百度图片" class="headerlink" title="4. 百度图片"></a>4. 百度图片</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">()</span>:</span></span><br><span class="line">	path = <span class="string">"D:\\爬虫\\风景图\\"</span></span><br><span class="line">	<span class="keyword">if</span> path.exists():</span><br><span class="line">		<span class="comment"># # 进入创建好的文件夹</span></span><br><span class="line">		os.chdir(path)</span><br><span class="line">	<span class="keyword">else</span>：</span><br><span class="line">		os.mkdir(path)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 发起请求</span></span><br><span class="line">	url = <span class="string">'https://image.baidu.com/search/acjson'</span></span><br><span class="line">	<span class="comment"># 设置请求头</span></span><br><span class="line">	header = &#123;</span><br><span class="line">		<span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">		<span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">		<span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">		<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">		<span class="string">'Cookie'</span>: <span class="string">'winWH=%5E6_1289x921; BDIMGISLOGIN=0; BDqhfp=%E7%BE%8E%E6%99%AF%E5%9B%BE%E7%89%87%E6%89%8B%E6%9C%BA%E5%A3%81%E7%BA%B8%26%26-10-1undefined%26%260%26%261; BIDUPSID=02AAC055870D97AE5CC9C6A7B3A44B5E; PSTM=1547256018; BAIDUID=3852792B67A29BD66480B12B61ABDA99:FG=1; BDUSS_BFESS=JzajRVYjVFYlZFRzlCRzVwdS1GMkxRWTNXfnpNU3BRbDR1TFVCZzZTejZFdmhlRVFBQUFBJCQAAAAAAAAAAAEAAADQUXs1ejE1MDI1OTI1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPqF0F76hdBeN0; BDUSS=R-UH54TzJIcENPMm0zQ1hWUFJKUnNiSTByZmdTUnRKcDBtfkJKVUliZnhLfmhlRVFBQUFBJCQAAAAAAAAAAAEAAADQUXs1ejE1MDI1OTI1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPGe0F7xntBecG; __cfduid=db56be19c58a7255c06ac365f966d84221590742029; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; H_WISE_SIDS=147766_148502_146259_143879_147277_148321_147886_148193_147280_146536_148002_131861_147829_147888_148523_127969_146036_147238_146551_146455_145418_147024_147352_146732_131423_144658_142205_147528_145601_145292_147295_146824_147989_144966_145608_148071_139882_146785_148346_147710_146055_145397_110085; MCITY=-153%3A; H_PS_PSSID=31727_1420_21123_31069_31254_30823; delPer=0; PSINO=2; ZD_ENTRY=baidu; BDRCVFR[dG2JNJb_ajR]=mk3SLVN4HKm; cleanHistoryStatus=0; BDRCVFR[-pGxjrCMryR]=mk3SLVN4HKm; indexPageSugList=%5B%22%E7%BE%8E%E6%99%AF%E5%9B%BE%E7%89%87%E6%89%8B%E6%9C%BA%E5%A3%81%E7%BA%B8%22%2C%22%E7%BE%8E%E6%99%AF%22%2C%22%E7%BE%8E%E5%A5%B3%22%2C%22%E6%9D%A8%E5%B9%82421%E5%85%B7%E4%BD%93%E4%BA%8B%E4%BB%B6%22%2C%22%E6%9D%A8%E5%B9%82%22%2C%22%E5%94%AF%E7%BE%8E%E8%83%8C%E6%99%AF%E5%9B%BE%22%2C%22%E6%98%9F%E7%A9%BA%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E5%8A%A8%E6%BC%AB%E5%94%AF%E7%BE%8E%22%2C%22%E6%98%9F%E7%A9%BA%E8%83%8C%E6%99%AF%E5%9B%BE%22%2C%22%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC%E5%BC%B9%E7%AA%97%22%5D; BDRCVFR[tox4WRQ4-Km]=mk3SLVN4HKm; BDRCVFR[CLK3Lyfkr9D]=mk3SLVN4HKm; __yjsv5_shitong=1.0_7_cbb8639798345fdf1cb4116f3ce70df4a867_300_1591439145145_123.7.183.90_09a9d0a4; yjs_js_security_passport=e8b935511f54aa347e8ada641a87a8deda72cc45_1591439146_js'</span>,</span><br><span class="line">		<span class="string">'Host'</span>: <span class="string">'image.baidu.com'</span>,</span><br><span class="line">		<span class="string">'Referer'</span>: <span class="string">'https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=result&amp;fr=&amp;sf=1&amp;fmq=1591438997767_R&amp;pv=&amp;ic=&amp;nc=1&amp;z=&amp;hd=&amp;latest=&amp;copyright=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;sid=&amp;word=%E7%BE%8E%E6%99%AF%E5%9B%BE%E7%89%87%E6%89%8B%E6%9C%BA%E5%A3%81%E7%BA%B8&amp;f=3&amp;oq=%E7%BE%8E%E6%99%AF&amp;rsp=3'</span>,</span><br><span class="line">		<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">		<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 配置请求参数</span></span><br><span class="line">	data = &#123;</span><br><span class="line">		<span class="string">'tn'</span>: <span class="string">'resultjson_com'</span>,</span><br><span class="line">		<span class="string">'ipn'</span>: <span class="string">'rj'</span>,</span><br><span class="line">		<span class="string">'ct'</span>: <span class="number">201326592</span>,</span><br><span class="line">		<span class="string">'is'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'fp'</span>: <span class="string">'result'</span>,</span><br><span class="line">		<span class="string">'queryWord'</span>: <span class="string">'美景图片手机壁纸'</span>,</span><br><span class="line">		<span class="string">'cl'</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">'lm'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'ie'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">		<span class="string">'oe'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">		<span class="string">'adpicid'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'st'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'z'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'ic'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'hd'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'latest'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'copyright'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'word'</span>: <span class="string">'美景图片手机壁纸'</span>,</span><br><span class="line">		<span class="string">'s'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'se'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'tab'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'width'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'height'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'face'</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">'istype'</span>: <span class="number">2</span>,</span><br><span class="line">		<span class="string">'qc'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'nc'</span>: <span class="number">1</span>,</span><br><span class="line">		<span class="string">'fr'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'expermode'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'force'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'pn'</span>: <span class="number">30</span>,</span><br><span class="line">		<span class="string">'rn'</span>: <span class="number">30</span>,</span><br><span class="line">		<span class="string">'gsm'</span>: gsm,</span><br><span class="line">		times: <span class="string">''</span></span><br><span class="line">	&#125;</span><br><span class="line">	res = requests.post(url,data,headers=header)  </span><br><span class="line">	dataList = json.loads(res.content)[<span class="string">'data'</span>][<span class="string">'songIdList'</span>]</span><br><span class="line">	<span class="comment"># 处理数据</span></span><br><span class="line">	songIds = <span class="string">','</span>.join(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> dataList)</span><br><span class="line">	params = &#123;</span><br><span class="line">		<span class="string">'songIds'</span>: songIds,</span><br><span class="line">		<span class="string">'hq'</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">'type'</span>: <span class="string">'m4a,mp3'</span>,</span><br><span class="line">		<span class="string">'rate'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'pt'</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">'flag'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'s2p'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'prerate'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'bwt'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'dur'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'bat'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'bp'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'pos'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'auto'</span>: <span class="number">-1</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	music_link = <span class="string">'http://play.taihe.com/data/music/songlink'</span></span><br><span class="line">	music_res = requests.post(music_link, params, headers=header2)  <span class="comment"># 请求url</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> music_res.status_code == <span class="number">200</span>:</span><br><span class="line">		music_list = json.loads(music_res.content)[<span class="string">'data'</span>][<span class="string">'songList'</span>]</span><br><span class="line">		<span class="keyword">for</span> m <span class="keyword">in</span> music_list:</span><br><span class="line">			music = requests.get(m[<span class="string">'songLink'</span>])</span><br><span class="line">			<span class="keyword">if</span> music.status_code == <span class="number">200</span>:</span><br><span class="line">				open(m[<span class="string">'songName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'-'</span> + m[<span class="string">'artistName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'.'</span> + m[<span class="string">'format'</span>], <span class="string">'wb'</span>).write(music.content)  <span class="comment"># 写入文件</span></span><br><span class="line">				print(m[<span class="string">'songName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'-'</span> + m[<span class="string">'artistName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'.'</span> + m[<span class="string">'format'</span>] + <span class="string">'下载完毕...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloadPic()</span><br></pre></td></tr></table></figure><h4 id="5-千千音乐"><a href="#5-千千音乐" class="headerlink" title="5. 千千音乐"></a>5. 千千音乐</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># os.mkdir("D:\\千千音乐\\")</span></span><br><span class="line">	<span class="comment"># # 进入创建好的文件夹</span></span><br><span class="line">	os.chdir(<span class="string">"D:\\千千音乐\\"</span>)</span><br><span class="line">	<span class="comment"># 发起请求</span></span><br><span class="line">	url = <span class="string">'http://play.taihe.com/data/music/box/top?topId=dayhot&amp;p='</span></span><br><span class="line">	<span class="comment"># 设置请求头</span></span><br><span class="line">	header = &#123;</span><br><span class="line">		<span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">		<span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">		<span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">		<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">		<span class="string">'Cookie'</span>: <span class="string">'BAIDUID=12DB41B4603517ED8A40407222015C08:FG=1; flash_tip_pop=true; log_sid=159097583252112DB41B4603517ED8A40407222015C08; Hm_lvt_2b0f0945031c52df2a103f3ed5d7c3aa=1590975832; sort-guide-showtimes=1; sort-guide-lastshow=1590975832128; Hm_lpvt_2b0f0945031c52df2a103f3ed5d7c3aa=1590975972'</span>,</span><br><span class="line">		<span class="string">'Host'</span>: <span class="string">'play.taihe.com'</span>,</span><br><span class="line">		<span class="string">'Referer'</span>: <span class="string">'http://play.taihe.com/?__m=mboxCtrl.playTop&amp;__a=dayhot&amp;fr=web'</span>,</span><br><span class="line">		<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">		<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></span><br><span class="line">	&#125;</span><br><span class="line">	header2 = &#123;</span><br><span class="line">		<span class="string">'Accept'</span>: <span class="string">'application/json, text/javascript, */*; q=0.01'</span>,</span><br><span class="line">		<span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>,</span><br><span class="line">		<span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">		<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">		<span class="string">'Cookie'</span>: <span class="string">'BAIDUID=12DB41B4603517ED8A40407222015C08:FG=1; flash_tip_pop=true; log_sid=159097583252112DB41B4603517ED8A40407222015C08; Hm_lvt_2b0f0945031c52df2a103f3ed5d7c3aa=1590975832; sort-guide-showtimes=1; sort-guide-lastshow=1590975832128; Hm_lpvt_2b0f0945031c52df2a103f3ed5d7c3aa=1590976274'</span>,</span><br><span class="line">		<span class="string">'Host'</span>: <span class="string">'play.taihe.com'</span>,</span><br><span class="line">		<span class="string">'Origin'</span>: <span class="string">'http://play.taihe.com'</span>,</span><br><span class="line">		<span class="string">'Referer'</span>: <span class="string">'http://play.taihe.com/?__m=mboxCtrl.playTop&amp;__a=dayhot&amp;fr=web'</span>,</span><br><span class="line">		<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">		<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment"># 配置请求参数</span></span><br><span class="line">	data = &#123;<span class="string">'p'</span>: <span class="string">''</span> , <span class="string">'topId'</span>: <span class="string">'dayhot'</span>&#125;</span><br><span class="line">	res = requests.post(url,data,headers=header)  </span><br><span class="line">	dataList = json.loads(res.content)[<span class="string">'data'</span>][<span class="string">'songIdList'</span>]</span><br><span class="line">	<span class="comment"># 处理数据</span></span><br><span class="line">	songIds = <span class="string">','</span>.join(str(i) <span class="keyword">for</span> i <span class="keyword">in</span> dataList)</span><br><span class="line">	params = &#123;</span><br><span class="line">		<span class="string">'songIds'</span>: songIds,</span><br><span class="line">		<span class="string">'hq'</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">'type'</span>: <span class="string">'m4a,mp3'</span>,</span><br><span class="line">		<span class="string">'rate'</span>: <span class="string">''</span>,</span><br><span class="line">		<span class="string">'pt'</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="string">'flag'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'s2p'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'prerate'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'bwt'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'dur'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'bat'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'bp'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'pos'</span>: <span class="number">-1</span>,</span><br><span class="line">		<span class="string">'auto'</span>: <span class="number">-1</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	music_link = <span class="string">'http://play.taihe.com/data/music/songlink'</span></span><br><span class="line">	music_res = requests.post(music_link, params, headers=header2)  <span class="comment"># 请求url</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> music_res.status_code == <span class="number">200</span>:</span><br><span class="line">		music_list = json.loads(music_res.content)[<span class="string">'data'</span>][<span class="string">'songList'</span>]</span><br><span class="line">		<span class="keyword">for</span> m <span class="keyword">in</span> music_list:</span><br><span class="line">			music = requests.get(m[<span class="string">'songLink'</span>])</span><br><span class="line">			<span class="keyword">if</span> music.status_code == <span class="number">200</span>:</span><br><span class="line">				open(m[<span class="string">'songName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'-'</span> + m[<span class="string">'artistName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'.'</span> + m[<span class="string">'format'</span>], <span class="string">'wb'</span>).write(music.content)  <span class="comment"># 写入文件</span></span><br><span class="line">				print(m[<span class="string">'songName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'-'</span> + m[<span class="string">'artistName'</span>].replace(<span class="string">'/'</span>, <span class="string">''</span>) + <span class="string">'.'</span> + m[<span class="string">'format'</span>] + <span class="string">'下载完毕...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">downloadPic()</span><br></pre></td></tr></table></figure><h4 id="6-王者荣耀英雄"><a href="#6-王者荣耀英雄" class="headerlink" title="6. 王者荣耀英雄"></a>6. 王者荣耀英雄</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://pvp.qq.com/web201605/js/herolist.json'</span></span><br><span class="line">herolist = requests.get(url)  <span class="comment"># 获取英雄列表json文件</span></span><br><span class="line">herolist_json = herolist.json()  <span class="comment"># 转化为json格式</span></span><br><span class="line">hero_name = list(map(<span class="keyword">lambda</span> x: x[<span class="string">'cname'</span>], herolist.json()))  <span class="comment"># 提取英雄的名字</span></span><br><span class="line">hero_number = list(map(<span class="keyword">lambda</span> x: x[<span class="string">'ename'</span>], herolist.json()))  <span class="comment"># 提取英雄的编号</span></span><br><span class="line"><span class="comment"># 下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span><span class="params">()</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> hero_number:</span><br><span class="line">        <span class="comment"># 创建文件夹</span></span><br><span class="line">        os.mkdir(<span class="string">"D:\\wzry\\"</span> + hero_name[i])</span><br><span class="line">        <span class="comment"># 进入创建好的文件夹</span></span><br><span class="line">        os.chdir(<span class="string">"D:\\wzry\\"</span> + hero_name[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># 拼接url</span></span><br><span class="line">            onehero_link = <span class="string">'http://game.gtimg.cn/images/yxzj/img201606/skin/hero-info/'</span> + str(j) + <span class="string">'/'</span> + str(</span><br><span class="line">                j) + <span class="string">'-bigskin-'</span> + str(k) + <span class="string">'.jpg'</span></span><br><span class="line">            im = requests.get(onehero_link)  <span class="comment"># 请求url</span></span><br><span class="line">            <span class="keyword">if</span> im.status_code == <span class="number">200</span>:</span><br><span class="line">                open(str(k) + <span class="string">'.jpg'</span>, <span class="string">'wb'</span>).write(im.content)  <span class="comment"># 写入文件</span></span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">downloadPic()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>魔兽秘籍</title>
    <url>/2020/06/17/%E9%AD%94%E5%85%BD%E7%A7%98%E7%B1%8D/%E9%AD%94%E5%85%BD%E7%A7%98%E7%B1%8D/</url>
    <content><![CDATA[<h2 id="魔兽秘籍"><a href="#魔兽秘籍" class="headerlink" title="魔兽秘籍"></a>魔兽秘籍</h2><h3 id="无敌并一击必杀"><a href="#无敌并一击必杀" class="headerlink" title="无敌并一击必杀:"></a>无敌并一击必杀:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whosyourdaddy</span><br></pre></td></tr></table></figure><h3 id="无限魔法"><a href="#无限魔法" class="headerlink" title="无限魔法:"></a>无限魔法:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thereisnospoon</span><br></pre></td></tr></table></figure><h3 id="任务模式里即使失败也能继续游戏"><a href="#任务模式里即使失败也能继续游戏" class="headerlink" title="任务模式里即使失败也能继续游戏:"></a>任务模式里即使失败也能继续游戏:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">strengthandhonor</span><br></pre></td></tr></table></figure><h3 id="地图全开"><a href="#地图全开" class="headerlink" title="地图全开:"></a>地图全开:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iseedeadpeople</span><br></pre></td></tr></table></figure><h3 id="立即胜利"><a href="#立即胜利" class="headerlink" title="立即胜利:"></a>立即胜利:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">allyourbasearebelongtous</span><br></pre></td></tr></table></figure><h3 id="加黄金"><a href="#加黄金" class="headerlink" title="加黄金:"></a>加黄金:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keysersoze 1000000</span><br></pre></td></tr></table></figure><h3 id="加木材"><a href="#加木材" class="headerlink" title="加木材:"></a>加木材:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">leafittome 1000000</span><br></pre></td></tr></table></figure><h3 id="加黄金和木材"><a href="#加黄金和木材" class="headerlink" title="加黄金和木材:"></a>加黄金和木材:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">greedisgood 1000000</span><br></pre></td></tr></table></figure><h3 id="快速建造"><a href="#快速建造" class="headerlink" title="快速建造:"></a>快速建造:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">warpten</span><br></pre></td></tr></table></figure><h3 id="无人口上限"><a href="#无人口上限" class="headerlink" title="无人口上限:"></a>无人口上限:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pointbreak</span><br></pre></td></tr></table></figure><h3 id="快速研究技能"><a href="#快速研究技能" class="headerlink" title="快速研究技能:"></a>快速研究技能:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whoisjohngalt</span><br></pre></td></tr></table></figure><h3 id="快速升级"><a href="#快速升级" class="headerlink" title="快速升级:"></a>快速升级:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sharpandshiny</span><br></pre></td></tr></table></figure><h3 id="解除科技树限制"><a href="#解除科技树限制" class="headerlink" title="解除科技树限制:"></a>解除科技树限制:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">synergy</span><br></pre></td></tr></table></figure><h3 id="将时间直接设定到白昼"><a href="#将时间直接设定到白昼" class="headerlink" title="将时间直接设定到白昼:"></a>将时间直接设定到白昼:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">riseandshine</span><br></pre></td></tr></table></figure><h3 id="将时间直接设定到夜晚"><a href="#将时间直接设定到夜晚" class="headerlink" title="将时间直接设定到夜晚:"></a>将时间直接设定到夜晚:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lightsout</span><br></pre></td></tr></table></figure><h3 id="设定具体时间-daylightsavings-小时数"><a href="#设定具体时间-daylightsavings-小时数" class="headerlink" title="设定具体时间: daylightsavings [小时数]"></a>设定具体时间: daylightsavings [小时数]</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daylightsavings</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
</search>
